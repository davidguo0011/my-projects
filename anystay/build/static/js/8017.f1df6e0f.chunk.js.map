{"version":3,"file":"static/js/8017.f1df6e0f.chunk.js","sources":["pages/hostConversation/mobileComponent/TopNavHeader.tsx","pages/hostConversation/desktopComponent/ChatBoxTopHeader.tsx","pages/hostConversation/HostConversationInbox/ConversationBubble/ConversationBubble.tsx","pages/hostConversation/loading/ConversationInboxDesktopWrapperLoading/ConversationInboxDesktopWrapperLoadingStyling.ts","pages/hostConversation/loading/ConversationInboxDesktopWrapperLoading/ConversationInboxDesktopWrapperLoading.tsx","pages/hostConversation/HostConversationInbox/HostConversationInbox.tsx","pages/hostConversation/mobileComponent/TopBookingInfo.tsx","pages/hostConversation/loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoadingStyling.ts","pages/hostConversation/loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoading.tsx","pages/hostConversation/HostConversationBookingDetails/HostConversationBookingDetails.tsx","pages/hostConversation/loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoadingStyling.ts","pages/hostConversation/loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoading.tsx","pages/hostConversation/HostConversationChatBox/Message/Message.tsx","pages/hostConversation/HostConversationChatBox/MessageInputComponent/MessageInput/MessageInput.tsx","pages/hostConversation/HostConversationChatBox/MessageInputComponent/MessageInputComponent.tsx","pages/hostConversation/HostConversationChatBox/HostConversationChatBox.tsx","pages/hostConversation/hostConversation.tsx"],"sourceRoot":"","sourcesContent":["import {\n    ConversationTitleWrapper,\n    ConversationTitleBackButton,\n    ConversationTitleIcon,\n    ConversationTitle,\n    ConversationBookingRequestMobileHeaderHostPhoneBtn,\n    ConversationCallIcon,\n} from \"../../conversation/conversationStyling\";\nimport { useNavigate } from \"react-router-dom\";\nimport { userHostModelSelector } from \"../../../state/selectors/userHostModel\";\nimport { useRecoilState } from \"recoil\";\nimport BackBtn from \"../../../components/btn/backBtn/backBtn\";\n\ninterface BookingGuestData {\n    firstName: string;\n    phone: string;\n}\n\ninterface TopNavHeaderProps {\n    bookingGuestData: BookingGuestData | null;\n}\n\nexport default function TopNavHeader({ bookingGuestData }: TopNavHeaderProps) {\n    const navigate = useNavigate();\n    const [userHostModel, setUserHostModel] = useRecoilState(userHostModelSelector);\n    if (!bookingGuestData) return null;\n    return (\n        <ConversationTitleWrapper>\n            <BackBtn\n                onClick={() => {\n                    navigate(`/your-host-inbox/${userHostModel!.id}`);\n                }}\n                type=\"Arrow\"\n            />\n            <ConversationTitle>{bookingGuestData.firstName}</ConversationTitle>\n            <ConversationBookingRequestMobileHeaderHostPhoneBtn href={`tel:${bookingGuestData.phone}`}>\n                <ConversationCallIcon src={\"https://d292awxalydr86.cloudfront.net/Universal+icons/Call.svg\"} alt={\"Call\"} />\n            </ConversationBookingRequestMobileHeaderHostPhoneBtn>\n        </ConversationTitleWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestDesktopHeaderWrapper,\n    ConversationBookingRequestDesktopHeaderTitle,\n    ConversationBookingRequestDesktopHeaderHostPhoneBtn,\n    ConversationCallIcon,\n} from \"../../conversation/conversationStyling\";\n\ninterface ChatBoxTopHeaderProps {\n    bookingGuestData: {\n        email: string;\n        firstName: string;\n        id: string;\n        identityID: string;\n        phone: string;\n        profilePicture: string;\n    } | null;\n}\n\nexport default function ChatBoxTopHeader({ bookingGuestData }: ChatBoxTopHeaderProps) {\n    if (!bookingGuestData) return null;\n    return (\n        <ConversationBookingRequestDesktopHeaderWrapper>\n            <div>\n                <ConversationBookingRequestDesktopHeaderTitle>{bookingGuestData.firstName}</ConversationBookingRequestDesktopHeaderTitle>\n            </div>\n            <ConversationBookingRequestDesktopHeaderHostPhoneBtn href={`tel:${bookingGuestData.phone}`}>\n                <ConversationCallIcon src={\"https://d292awxalydr86.cloudfront.net/Universal+icons/Call.svg\"} alt={\"Call\"} />\n            </ConversationBookingRequestDesktopHeaderHostPhoneBtn>\n        </ConversationBookingRequestDesktopHeaderWrapper>\n    );\n}\n","import { useState, useEffect } from \"react\";\nimport constructOptimisedProtectedImageUrl from \"../../../../utils/imageOptimisation/constructOptimisedProtectedImageUrl\";\nimport {\n    RecentConversationBubble,\n    RecentConversationBubblesGuestImage,\n    RecentConversationBubblesTitle,\n    RecentConversationBubbleTextWrapper,\n    RecentConversationBubblesSubtitle,\n} from \"../../../conversation/conversationStyling\";\nimport { useParams } from \"react-router-dom\";\n\ninterface Conversation {\n    id: string;\n    UserModel: {\n        profilePicture: string;\n        identityID: string;\n        firstName: string;\n    };\n    updatedAt: string;\n    BookingRequestModel: {\n        declined: boolean;\n        cancelled: boolean;\n        completed: boolean;\n        confirmed: boolean;\n        expired: boolean;\n        ListingModel: {\n            propertyTitle: string;\n        } | null;\n    };\n    MessageModels: {\n        items: Array<{\n            body: string | null;\n            hostNoteBody: string | null;\n        }>;\n    };\n}\n\ninterface ConversationBubbleProps {\n    conversation: Conversation;\n}\n\nexport default function ConversationBubble({ conversation }: ConversationBubbleProps) {\n    const { id } = useParams();\n    const [profilePhoto, setProfilePhoto] = useState(\"https://d292awxalydr86.cloudfront.net/Settings+page/Profile+photo+placeholder.png\");\n    useEffect(() => {\n        if (conversation?.UserModel?.profilePicture) {\n            const profilePic = constructOptimisedProtectedImageUrl(conversation.UserModel.profilePicture, conversation.UserModel.identityID, 100);\n            setProfilePhoto(profilePic);\n        }\n    }, [conversation]);\n\n    const fetchTimeDifference = () => {\n        let startDate = new Date(conversation.updatedAt);\n        let endDate = new Date();\n        let timeDiff = (endDate.getTime() - startDate.getTime()) / 1000 / 60 / 60;\n        if (timeDiff > 24) {\n            return `${Math.floor(timeDiff / 24)}d`;\n        } else if (timeDiff < 1) {\n            return `${Math.floor(timeDiff * 60)}m`;\n        } else {\n            return `${Math.floor(timeDiff)}h`;\n        }\n    };\n\n    const getBookingRequestState = () => {\n        if (conversation.BookingRequestModel.declined) {\n            return \"Declined\";\n        }\n        if (conversation.BookingRequestModel.cancelled) {\n            return \"Cancelled\";\n        }\n        if (!conversation.BookingRequestModel.completed) {\n            return \"Enquiry\";\n        }\n        if (conversation.BookingRequestModel.confirmed) {\n            return \"Confirmed\";\n        }\n        if (conversation.BookingRequestModel.expired) {\n            return \"Expired\";\n        }\n        return \"Requested\";\n    };\n\n    const getConversationSubtitle = () => {\n        if (conversation.BookingRequestModel.ListingModel) {\n            const subtitle = `${getBookingRequestState()} â€¢ ${conversation.BookingRequestModel.ListingModel.propertyTitle}`;\n\n            if (subtitle.length > 43) {\n                return subtitle.substring(0, 40).trim() + \"...\";\n            } else {\n                return subtitle;\n            }\n        } else {\n            return \"\";\n        }\n    };\n\n    const getTheMostRecentConversationMsg = () => {\n        if (conversation.MessageModels.items.length === 0) {\n            return null;\n        } else if (conversation.MessageModels.items[0].body !== null) {\n            return conversation.MessageModels.items[0].body;\n        } else if (conversation.MessageModels.items[0].hostNoteBody !== null) {\n            return conversation.MessageModels.items[0].hostNoteBody;\n        }\n    };\n\n    return (\n        <RecentConversationBubble to={`/host-conversation/${conversation.id}`} selected={conversation.id === id}>\n            <RecentConversationBubblesGuestImage src={profilePhoto} alt=\"Photo fo listing owner\" />\n            <RecentConversationBubbleTextWrapper>\n                <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"space-between\" }}>\n                    <RecentConversationBubblesTitle>{conversation.UserModel?.firstName}</RecentConversationBubblesTitle>\n                    {conversation.BookingRequestModel && <RecentConversationBubblesSubtitle>{fetchTimeDifference()}</RecentConversationBubblesSubtitle>}\n                </div>\n                <RecentConversationBubblesTitle>{getTheMostRecentConversationMsg()}</RecentConversationBubblesTitle>\n                <RecentConversationBubblesSubtitle>{getConversationSubtitle()}</RecentConversationBubblesSubtitle>\n            </RecentConversationBubbleTextWrapper>\n        </RecentConversationBubble>\n    );\n}\n","import styled from \"styled-components\";\nexport const ConversationInboxContainerLoadingWrapper = styled.div`\n    grid-column: 1/2;\n    grid-row: 1/4;\n    width: 100%;\n    max-height: calc(100% - 162px);\n    overflow-y: scroll !important;\n    padding: 0 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    @media (max-width: 767px) {\n        display: none;\n    }\n`;\n","import { ConversationInboxContainerLoadingWrapper } from \"./ConversationInboxDesktopWrapperLoadingStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nexport default function ConversationInboxDesktopWrapperLoading() {\n    return (\n        <ConversationInboxContainerLoadingWrapper>\n            <ChatMessageLoadingSpinner style={{ width: \"50px\", height: \"50px\" }} />\n        </ConversationInboxContainerLoadingWrapper>\n    );\n}\n","import { RecentConversationsWrapper, RecentConversationsTitle, RecentConversationBubblesWrapper, FetchMoreConversationLoadingWrapper } from \"../../conversation/conversationStyling\";\nimport ChatMessageLoadingSpinner from \"../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport ConversationBubble from \"./ConversationBubble/ConversationBubble\";\nimport { useRef, useState, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as customSubscriptions from \"../../../graphql/customSubscriptions\";\nimport { userHostModelSelector } from \"../../../state/selectors/userHostModel\";\nimport { useRecoilState } from \"recoil\";\nimport ConversationInboxDesktopWrapperLoading from \"../loading/ConversationInboxDesktopWrapperLoading/ConversationInboxDesktopWrapperLoading\";\nimport { callApi } from \"../../../utils/api/api\";\nimport Observable from \"zen-observable-ts\";\n\ninterface HostConversationInboxProps {\n    accessToken: string;\n}\n\ninterface Conversation {\n    id: string;\n    updatedAt: string;\n    status: string;\n    UserModel: {\n        profilePicture: string;\n        identityID: string;\n        firstName: string;\n    };\n    BookingRequestModel: {\n        declined: boolean;\n        cancelled: boolean;\n        completed: boolean;\n        confirmed: boolean;\n        expired: boolean;\n        ListingModel: {\n            propertyTitle: string;\n        } | null;\n    };\n    MessageModels: {\n        items: Array<{\n            body: string | null;\n            hostNoteBody: string | null;\n        }>;\n    };\n}\n\nexport default function HostConversationInbox({ accessToken }: HostConversationInboxProps) {\n    const conversationsContainerRef = useRef<HTMLDivElement | null>(null);\n    const conversationNextToken = useRef<string | null>(null);\n    const conversationsFetching = useRef(false);\n    const [isConversationBottom, setIsConversationBottom] = useState(false);\n    const [hostConversations, setHostConversations] = useState<Conversation[]>([]);\n    const [userHostModel, setUserHostModel] = useRecoilState(userHostModelSelector);\n    const [loadingPage, setLoadingPage] = useState(false);\n\n    const hasConversationOverFlow = () => {\n        return conversationsContainerRef.current?.scrollHeight! > conversationsContainerRef.current?.clientHeight!;\n    };\n    const handleConversationScroll = useCallback(() => {\n        // check if the conversation has overflow and if the user is at the bottom of the conversation\n        if (hasConversationOverFlow() && !conversationsFetching.current) {\n            if (conversationNextToken.current === null) {\n                return;\n            }\n            setIsConversationBottom(Math.ceil(conversationsContainerRef.current?.scrollTop!) + conversationsContainerRef.current?.clientHeight! >= conversationsContainerRef.current?.scrollHeight!);\n        }\n    }, []);\n\n    const updateHostConversationsSubscription = useCallback(async (userHostModelId: string) => {\n        const subscription = API.graphql(\n            graphqlOperation(customSubscriptions.onUpdateConversationByUserHostModelID, {\n                userhostmodelID: userHostModelId,\n            })\n        ) as Observable<any>;\n\n        subscription.subscribe({\n            next: ({ provider, value }) => {\n                setHostConversations((prevConversations) => {\n                    const updatedConversation = value.data.onUpdateConversationByUserHostModelID;\n                    const conversationsCopy = prevConversations.map((conversation) => {\n                        if (conversation.id === updatedConversation.id) {\n                            return {\n                                ...conversation,\n                                MessageModels: updatedConversation.MessageModels,\n                                updatedAt: new Date().toISOString(),\n                                status: updatedConversation.status,\n                            };\n                        }\n                        return conversation;\n                    });\n                    return sortConversations(conversationsCopy);\n                });\n            },\n            error: (error) => console.warn(error),\n        });\n    }, []);\n    const sortConversations = (hostConversations: Conversation[]) => {\n        return [...hostConversations.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())];\n    };\n    const fetchConversations = useCallback(async () => {\n        await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-user`, `user/host/conversations`, {\n            headers: {\n                Authorization: accessToken,\n            },\n            body: {\n                userHostModelId: userHostModel!.id,\n                nextToken: null,\n            },\n        }).then((res) => {\n            console.log(res);\n            if (res.success) {\n                conversationNextToken.current = res.body.nextToken;\n                setHostConversations(res.body.conversations);\n            }\n        });\n    }, [accessToken, userHostModel]);\n    const fetchMoreConversations = useCallback(\n        async (nextToken: string) => {\n            conversationsFetching.current = true;\n            await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-user`, `user/host/conversations`, {\n                headers: {\n                    Authorization: accessToken,\n                },\n                body: {\n                    userHostModelId: userHostModel!.id,\n                    nextToken: nextToken,\n                },\n            })\n                .then((res) => {\n                    console.log(res);\n                    if (res.success) {\n                        conversationNextToken.current = res.body.nextToken;\n                        setIsConversationBottom(false);\n                        setHostConversations((prevState) => {\n                            return [...prevState, ...res.body.conversations];\n                        });\n                        conversationsFetching.current = false;\n                    }\n                })\n                .catch((err) => console.log(err));\n        },\n        [accessToken, userHostModel]\n    );\n\n    useEffect(() => {\n        if (!loadingPage) {\n            const { current } = conversationsContainerRef;\n            current?.addEventListener(\"scroll\", handleConversationScroll);\n\n            return () => {\n                current?.removeEventListener(\"scroll\", handleConversationScroll);\n            };\n        }\n    }, [handleConversationScroll, loadingPage]);\n\n    useEffect(() => {\n        if (isConversationBottom && conversationNextToken.current) {\n            console.log(\"fetch more conversation\");\n            fetchMoreConversations(conversationNextToken.current);\n        }\n    }, [fetchMoreConversations, isConversationBottom]);\n\n    //init\n    useEffect(() => {\n        const init = async () => {\n            setLoadingPage(true);\n            await fetchConversations();\n            await updateHostConversationsSubscription(userHostModel!.id);\n            setLoadingPage(false);\n        };\n        init();\n    }, [fetchConversations, updateHostConversationsSubscription, userHostModel]);\n\n    if (loadingPage) return <ConversationInboxDesktopWrapperLoading />;\n    return (\n        <RecentConversationsWrapper ref={conversationsContainerRef}>\n            <RecentConversationsTitle>Inbox</RecentConversationsTitle>\n            <RecentConversationBubblesWrapper>\n                {hostConversations.map((hostConversation) => {\n                    return <ConversationBubble key={hostConversation.id} conversation={hostConversation} />;\n                })}\n                {isConversationBottom && (\n                    <FetchMoreConversationLoadingWrapper>\n                        <ChatMessageLoadingSpinner />\n                    </FetchMoreConversationLoadingWrapper>\n                )}\n            </RecentConversationBubblesWrapper>\n        </RecentConversationsWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestHeaderWrapper,\n    ConversationBookingRequestHeaderImage,\n    ConversationBookingRequestHeaderTextWrapper,\n    ConversationBookingRequestHeaderSubtitle,\n    ConversationBookingRequestHeaderTitle,\n} from \"../../conversation/conversationStyling\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ColorTheme } from \"../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nimport { defaultSearchFilter } from \"../../../utils/defaultSearchQuery/defaultSearchQuery\";\nimport { BookingRequestModel } from \"../../../interfaces/models/bookingRequestModel\";\nimport { ListingModel } from \"../../../interfaces/models/listingModel\";\nimport constructOptimisedImageUrl from \"../../../utils/imageOptimisation/constructOptimisedImageUrl\";\n\ninterface BookingRequest extends BookingRequestModel {\n    expired: boolean;\n}\ninterface TopBookingInfoProps {\n    bookingRequest: BookingRequest | null;\n    listingData: ListingModel | null;\n}\n\nexport default function TopBookingInfo({ bookingRequest, listingData }: TopBookingInfoProps) {\n    const navigate = useNavigate();\n    const getMonth = (month: number) => {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[month] ? months[month] : \"\";\n    };\n    const getBookingRequestState = () => {\n        if (bookingRequest) {\n            if (bookingRequest.declined) {\n                return \"Declined\";\n            }\n            if (bookingRequest.cancelled) {\n                return \"Cancelled\";\n            }\n            if (!bookingRequest.completed) {\n                return \"Enquiry\";\n            }\n            if (bookingRequest.confirmed) {\n                return \"Confirmed\";\n            }\n            if (bookingRequest.expired) {\n                return \"Expired\";\n            } else {\n                return \"Requested\";\n            }\n        }\n    };\n    const getArrivalDate = () => {\n        if (bookingRequest!.arrivalDate === null) {\n            return \"-\";\n        }\n        let arrivalDate = new Date(bookingRequest!.arrivalDate.replace(\"Z\", \"\"));\n\n        return `${arrivalDate.getDate()} ${getMonth(arrivalDate.getMonth())}`;\n    };\n    const getDepartureDate = () => {\n        if (bookingRequest!.departureDate === null) {\n            return \"-\";\n        }\n        let departureDate = new Date(bookingRequest!.departureDate.replace(\"Z\", \"\"));\n\n        return `${departureDate.getDate()} ${getMonth(departureDate.getMonth())}`;\n    };\n    if (!bookingRequest || !listingData) return null;\n    return (\n        <ConversationBookingRequestHeaderWrapper\n            type=\"button\"\n            onClick={() => {\n                if (bookingRequest.completed) {\n                    navigate(`/your-booking/${bookingRequest.id}`);\n                } else {\n                    navigate(`/listing/${bookingRequest.listingmodelID}`);\n                }\n            }}\n        >\n            <ConversationBookingRequestHeaderImage src={constructOptimisedImageUrl(JSON.parse(listingData.listingImages[0] as string).key, 500)} alt=\"Picture of listing model\" />\n            <ConversationBookingRequestHeaderTextWrapper>\n                <ConversationBookingRequestHeaderTitle>{`${listingData.propertyTitle.substr(0, 15)}${\n                    listingData.propertyTitle.split(\"\").length > 15 ? \"...\" : \"\"\n                }`}</ConversationBookingRequestHeaderTitle>\n                <ConversationBookingRequestHeaderSubtitle\n                    style={{\n                        color: bookingRequest.declined || bookingRequest.cancelled || bookingRequest.confirmed || !bookingRequest.completed ? ColorTheme.Black.color : ColorTheme.Yellow.color,\n                    }}\n                >\n                    {getBookingRequestState()} â€¢ {getArrivalDate()} - {getDepartureDate()}{\" \"}\n                </ConversationBookingRequestHeaderSubtitle>\n            </ConversationBookingRequestHeaderTextWrapper>\n        </ConversationBookingRequestHeaderWrapper>\n    );\n}\n","import styled from \"styled-components\";\nimport { ColorTheme } from \"../../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nexport const ConversationBookingRequestDesktopWrapperLoadingWrapper = styled.div`\n    grid-row: 1/4;\n    grid-column: 3/4;\n    height: 100%;\n    width: 100%;\n    border-left: 1px solid ${ColorTheme.Grey2.color};\n    padding: 44px 32px;\n    padding-top: 32px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    @media (max-width: 1280px) {\n        display: none;\n    }\n`;\n","import { ConversationBookingRequestDesktopWrapperLoadingWrapper } from \"./ConversationBookingRequestDesktopWrapperLoadingStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\n\nexport default function ConversationBookingRequestDesktopWrapperLoading() {\n    return (\n        <ConversationBookingRequestDesktopWrapperLoadingWrapper>\n            <ChatMessageLoadingSpinner style={{ width: \"50px\", height: \"50px\" }} />\n        </ConversationBookingRequestDesktopWrapperLoadingWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestDesktopWrapper,\n    // BookingRequestCallButton,\n    BookingRequestDetailsButton,\n    BookingRequestDetailsButtonComplete,\n    BookingRequestDatesWrapper,\n    BookingRequestDatesTitle,\n    BookingRequestDatesSubtitle,\n    BookingRequestDatesDivider,\n    BookingRequestDetailWrapper,\n    PriceDetailsSubtotalPriceWrapper,\n    PriceDetailsSubtotalPrice,\n    BookingRequestCommunicationNotice,\n    BookingRequestReportHost,\n    HostConversationGuestProfileWrapper,\n    HostConversationGuestProfilePictureWrapper,\n    HostConversationGuestProfilePicture,\n    HostConversationGuestProfileTextWrapper,\n    HostConversationGuestProfileTextTitle,\n    HostConversationGuestProfileName,\n    ConversationBookingRequestHeaderPrice,\n    HostConversationGuestProfileTextSubtitle,\n    HostConversationBookingRequestGuests,\n    HostConversationBookingRequestGuestsText,\n    HostBookingRefButton,\n    HostConversationBookingRequestGuestLink,\n    PotentialPayoutDivider,\n    BookingRequestCommunicationNoticeTitle,\n    InboxSectionDivider,\n    BookingRequestDatesSubtitleTime,\n} from \"../../conversation/conversationStyling\";\nimport { useRef, useState, RefObject } from \"react\";\nimport ConversationBookingRequestDesktopWrapperLoading from \"../loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoading\";\nimport { ColorTheme } from \"../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nimport useClickOutside from \"../../../hook/useClickOutside\";\nimport CopiedToClipboardPortal from \"../../../components/popupNotification/copiedToClipboard/CopiedToClipboard\";\nimport { AnimatePresence } from \"framer-motion\";\ninterface BookingRequest {\n    id: string;\n    declined: boolean;\n    cancelled: boolean;\n    completed: boolean;\n    confirmed: boolean;\n    bookingAmountIncludingServiceFee: number;\n    refundedAmount: number;\n    arrivalDate: string;\n    departureDate: string;\n    cancellationPolicy: string;\n    checkInTime: number;\n    checkOutTime: number;\n    guests: number;\n    infants: number;\n    pets: number;\n    createdAt: string;\n    confirmationCode: string;\n    paymentAmount: number;\n    deposit: number;\n}\n\ninterface BookingGuestData {\n    firstName: string;\n    phone: string;\n}\n\ninterface ListingData {\n    propertyTitle: string;\n}\n\ninterface PriceItem {\n    label: string;\n    amountFormatted: string;\n}\n\ninterface HostPriceBreakdown {\n    priceItems: PriceItem[];\n    subTotalItems: PriceItem[];\n}\n\ninterface HostConversationBookingRequest extends BookingRequest {\n    bookingAmount: number;\n}\n\ninterface Props {\n    bookingRequest: HostConversationBookingRequest | null;\n    bookingGuestData: BookingGuestData | null;\n    guestProfilePictureURL: string;\n    listingData: ListingData | null;\n    loadingPage: boolean;\n    hostPriceBreakdown: HostPriceBreakdown | null;\n}\n\nexport default function HostConversationBookingDetails({ bookingRequest, bookingGuestData, guestProfilePictureURL, listingData, loadingPage, hostPriceBreakdown }: Props) {\n    const bookingDetailRef = useRef(null);\n    const [copied, setCopied] = useState(false);\n    const getBookingRequestState = () => {\n        if (bookingRequest) {\n            if (bookingRequest.declined) {\n                return \"Declined\";\n            }\n            if (bookingRequest.cancelled) {\n                return \"Cancelled\";\n            }\n            if (!bookingRequest.completed) {\n                return \"Enquiry\";\n            }\n            if (bookingRequest.confirmed) {\n                return \"Confirmed\";\n            } else {\n                return \"Requested\";\n            }\n        }\n    };\n    const getMonth = (month: number) => {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[month] ? months[month] : \"\";\n    };\n    // const renderHeaderPrice = () => {\n    //     const amount = ((bookingRequest.bookingAmountIncludingServiceFee - bookingRequest.refundedAmount) / 100).toFixed(2);\n    //     const refundedAmount = (bookingRequest.refundedAmount / 100).toFixed(2);\n    //     return `$${amount} ${bookingRequest.refundedAmount > 0 ? `(-$${refundedAmount})` : \"\"} AUD`;\n    // };\n    const getArrivalFullDate = () => {\n        if (bookingRequest!.arrivalDate === null) {\n            return \"-\";\n        }\n        let arrivalDate = new Date(bookingRequest!.arrivalDate.replace(\"Z\", \"\"));\n\n        return `${arrivalDate.getDate()} ${getMonth(arrivalDate.getMonth())} ${arrivalDate.getFullYear()}`;\n    };\n    const getDepartureFullDate = () => {\n        if (bookingRequest!.departureDate === null) {\n            return \"-\";\n        }\n        let departureDate = new Date(bookingRequest!.departureDate.replace(\"Z\", \"\"));\n\n        return `${departureDate.getDate()} ${getMonth(departureDate.getMonth())} ${departureDate.getFullYear()}`;\n    };\n    const getCancellationPolicy = () => {\n        let arrivalDate = new Date(bookingRequest!.arrivalDate);\n        let flexibleDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 1);\n        let moderateDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 14);\n        let strictDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 28);\n\n        if (bookingRequest!.cancellationPolicy === \"flexible\") {\n            return (\n                <span>\n                    <strong>Free cancellation before {`${new Date(flexibleDate).getUTCDate()} ${getMonth(new Date(flexibleDate).getMonth())}`}.</strong> After that, if your guest cancels they will\n                    receive a full refund of unspent nights minus service fee and cleaning fee if applicable.\n                </span>\n            );\n        } else if (bookingRequest!.cancellationPolicy === \"moderate\") {\n            return (\n                <span>\n                    <strong>Free cancellation before {`${new Date(moderateDate).getUTCDate()} ${getMonth(new Date(moderateDate).getMonth())}`}.</strong> After that, if your guest cancels they will\n                    receive a full refund of half the unspent nights minus service fee and cleaning fee if applicable.\n                </span>\n            );\n        } else if (bookingRequest!.cancellationPolicy === \"strict\") {\n            return (\n                <span>\n                    <strong>Free cancellation before {`${new Date(strictDate).getUTCDate()} ${getMonth(new Date(strictDate).getMonth())}`}.</strong> After that, if your guest cancel less than 2 weeks\n                    to arrival, they will be charged for the first week.\n                </span>\n            );\n        }\n    };\n    const getTime = (time: number) => {\n        if (time < 100 || time > 2400) {\n            return null;\n        }\n        const ampm = time > 1100 && time < 2400 ? \"pm\" : \"am\";\n        const hour = time === 1200 || time === 2400 ? 12 : (time / 100) % 12;\n        return `${hour}:00${ampm}`;\n    };\n    const getNights = () => {\n        const departureDatewithNoTime = new Date(new Date(bookingRequest!.departureDate).setUTCHours(0, 0, 0, 0)).getTime();\n        const arrivalDatewithNoTime = new Date(new Date(bookingRequest!.arrivalDate).setUTCHours(0, 0, 0, 0)).getTime();\n        let nights = (departureDatewithNoTime - arrivalDatewithNoTime) / (1000 * 3600 * 24);\n        return Math.ceil(nights);\n    };\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const handleClick = () => {\n        if (!isOpen) {\n            (window as any).Intercom(\"showNewMessage\", \"\");\n            setIsOpen(true);\n        } else {\n            (window as any).Intercom(\"hide\");\n            setIsOpen(false);\n        }\n    };\n    const wrapperRef = useClickOutside<HTMLAnchorElement>(isOpen, handleClick);\n    if (loadingPage) return <ConversationBookingRequestDesktopWrapperLoading />;\n    if (!bookingRequest || !bookingGuestData || !listingData) return <ConversationBookingRequestDesktopWrapper />;\n    return (\n        <ConversationBookingRequestDesktopWrapper ref={bookingDetailRef}>\n            {getBookingRequestState() !== \"Enquiry\" &&\n                (bookingRequest.cancelled || bookingRequest.declined ? null : bookingRequest.confirmed ? (\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: \"32px\" }}>\n                        {/* <BookingRequestCallButton style={{ background: ColorTheme.Blue.color }} href={`tel:${bookingGuestData.phone}`}>\n                            Call\n                        </BookingRequestCallButton> */}\n                        <BookingRequestDetailsButton style={{ background: ColorTheme.Black.color }} to={`/booking-request/${bookingRequest.id}`}>\n                            Details\n                        </BookingRequestDetailsButton>\n                    </div>\n                ) : (\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: \"32px\" }}>\n                        <BookingRequestDetailsButtonComplete style={{ background: ColorTheme.Yellow.color }} to={`/booking-request/${bookingRequest.id}`}>\n                            Respond\n                        </BookingRequestDetailsButtonComplete>\n                    </div>\n                ))}\n            <HostConversationGuestProfileWrapper>\n                <HostConversationGuestProfilePictureWrapper>\n                    <HostConversationGuestProfilePicture src={guestProfilePictureURL} alt=\"\" />\n                </HostConversationGuestProfilePictureWrapper>\n                <HostConversationGuestProfileTextWrapper>\n                    <HostConversationGuestProfileTextTitle>{getBookingRequestState()}</HostConversationGuestProfileTextTitle>\n\n                    <HostConversationGuestProfileName>{bookingGuestData.firstName}</HostConversationGuestProfileName>\n\n                    <ConversationBookingRequestHeaderPrice>{`$${(bookingRequest.bookingAmount / 100).toFixed(2)} ${\n                        bookingRequest.refundedAmount > 0 ? `(-$${(bookingRequest.refundedAmount / 100).toFixed(2)})` : \"\"\n                    } AUD`}</ConversationBookingRequestHeaderPrice>\n                    {listingData && <HostConversationGuestProfileTextSubtitle>{listingData.propertyTitle}</HostConversationGuestProfileTextSubtitle>}\n                    {bookingRequest && (\n                        <HostConversationGuestProfileTextSubtitle style={{ textDecoration: \"none\" }}>\n                            {getNights()} nights â€¢ {bookingRequest.guests} guest{bookingRequest.guests > 1 && \"s\"}\n                        </HostConversationGuestProfileTextSubtitle>\n                    )}\n                </HostConversationGuestProfileTextWrapper>\n            </HostConversationGuestProfileWrapper>\n\n            <BookingRequestDatesWrapper>\n                <div style={{ gridColumn: \"1/2\", gridRow: \"1/2\", display: \"flex\", flexDirection: \"column\" }}>\n                    <BookingRequestDatesTitle>Arrive</BookingRequestDatesTitle>\n                    <BookingRequestDatesSubtitle>{getArrivalFullDate()}</BookingRequestDatesSubtitle>\n                    <BookingRequestDatesSubtitleTime>{bookingRequest.checkInTime > 0 ? getTime(bookingRequest.checkInTime) : \"3:00PM\"}</BookingRequestDatesSubtitleTime>\n                </div>\n                <BookingRequestDatesDivider />\n                <div style={{ gridColumn: \"2/3\", display: \"flex\", flexDirection: \"column\", paddingLeft: \"32px\" }}>\n                    <BookingRequestDatesTitle>Depart</BookingRequestDatesTitle>\n                    <BookingRequestDatesSubtitle>{getDepartureFullDate()}</BookingRequestDatesSubtitle>\n                    <BookingRequestDatesSubtitleTime>{bookingRequest.checkOutTime ? getTime(bookingRequest.checkOutTime) : \"10:00AM\"}</BookingRequestDatesSubtitleTime>\n                </div>\n            </BookingRequestDatesWrapper>\n\n            <HostConversationBookingRequestGuests>\n                <HostConversationBookingRequestGuestsText>Guests</HostConversationBookingRequestGuestsText>\n                <HostConversationBookingRequestGuestsText>\n                    {bookingRequest.guests} guest{bookingRequest.guests > 1 && \"s\"}\n                    {bookingRequest.infants > 1 ? `, ${bookingRequest.infants} infants` : bookingRequest.infants > 0 && `, ${bookingRequest.infants} infant`}\n                    {bookingRequest.pets > 1 ? `, ${bookingRequest.pets} pes` : bookingRequest.pets > 0 && `, ${bookingRequest.pets} pet`}\n                </HostConversationBookingRequestGuestsText>\n            </HostConversationBookingRequestGuests>\n\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <HostConversationBookingRequestGuests>\n                    <HostConversationBookingRequestGuestsText>Booking date</HostConversationBookingRequestGuestsText>\n                    <HostConversationBookingRequestGuestsText>\n                        {new Date(bookingRequest.createdAt.replace(\"Z\", \"\")).toLocaleDateString(\"au\", { day: \"numeric\", month: \"short\", year: \"numeric\" })}\n                    </HostConversationBookingRequestGuestsText>\n                </HostConversationBookingRequestGuests>\n            )}\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <HostConversationBookingRequestGuests>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <BookingRequestDatesTitle>Booking ref.</BookingRequestDatesTitle>\n                        <BookingRequestDatesSubtitle>{bookingRequest.confirmationCode}</BookingRequestDatesSubtitle>\n                    </div>\n                    <HostBookingRefButton\n                        type=\"button\"\n                        onClick={() => {\n                            setCopied(true);\n                            navigator.clipboard.writeText(bookingRequest.confirmationCode);\n                            setTimeout(() => {\n                                setCopied(false);\n                            }, 2000);\n                        }}\n                    >\n                        {copied ? \"Copied!\" : \"Copy\"}\n                        <AnimatePresence>{copied && <CopiedToClipboardPortal />}</AnimatePresence>\n                    </HostBookingRefButton>\n                </HostConversationBookingRequestGuests>\n            )}\n            <HostConversationBookingRequestGuests style={{ border: \"none\" }}>\n                <HostConversationBookingRequestGuestLink to={\"/your-calendar\"}>See calendar</HostConversationBookingRequestGuestLink>\n            </HostConversationBookingRequestGuests>\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <>\n                    <InboxSectionDivider />\n                    <BookingRequestDetailWrapper style={{ paddingTop: \"0\" }}>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n                            <BookingRequestCommunicationNoticeTitle style={{ marginBottom: \"24px\" }}>Your payout</BookingRequestCommunicationNoticeTitle>\n                            {hostPriceBreakdown!.priceItems.map((item, index) => {\n                                return (\n                                    <PriceDetailsSubtotalPriceWrapper key={item.label}>\n                                        <PriceDetailsSubtotalPrice>{item.label}</PriceDetailsSubtotalPrice>\n                                        <PriceDetailsSubtotalPrice>{item.amountFormatted}</PriceDetailsSubtotalPrice>\n                                    </PriceDetailsSubtotalPriceWrapper>\n                                );\n                            })}\n                            {hostPriceBreakdown!.subTotalItems.map((item, index) => {\n                                return (\n                                    <PriceDetailsSubtotalPriceWrapper key={item.label}>\n                                        <PriceDetailsSubtotalPrice style={{ fontWeight: index === 0 ? \"600\" : \"400\" }}>{item.label}</PriceDetailsSubtotalPrice>\n                                        <PriceDetailsSubtotalPrice style={{ fontWeight: index === 0 ? \"600\" : \"400\" }}>{item.amountFormatted}</PriceDetailsSubtotalPrice>\n                                    </PriceDetailsSubtotalPriceWrapper>\n                                );\n                            })}\n                        </div>\n                    </BookingRequestDetailWrapper>\n                </>\n            )}\n            {bookingRequest.confirmed && (\n                <HostConversationBookingRequestGuests style={{ border: \"none\" }}>\n                    <HostConversationBookingRequestGuestLink to={`/payment-details/${bookingRequest.id}`}>Manage payout</HostConversationBookingRequestGuestLink>\n                </HostConversationBookingRequestGuests>\n            )}\n            <InboxSectionDivider />\n            <BookingRequestCommunicationNoticeTitle>Guest policy</BookingRequestCommunicationNoticeTitle>\n            <BookingRequestCommunicationNotice>\n                {getCancellationPolicy()}\n                <br />\n                <br />\n                {bookingRequest.deposit > 0 ? (\n                    <span>\n                        <strong>Your host may charge a ${Number(bookingRequest.deposit / 100)} AUD deposit. </strong> This is usually processed at check-in, your host will provide more information.\n                    </span>\n                ) : (\n                    <span>\n                        <strong>No deposit. </strong> You don't have to pay a deposit. However, you may still be liable for damages. Your host will provide more information.\n                    </span>\n                )}\n            </BookingRequestCommunicationNotice>\n\n            <BookingRequestCommunicationNotice>\n                <strong>Always communicate through Anystay.</strong> To protect your payment, never transfer money or communicate outside of the Anystay website or app.\n            </BookingRequestCommunicationNotice>\n            <BookingRequestReportHost onClick={handleClick} style={{ color: ColorTheme.Black.color }} ref={wrapperRef}>\n                Report guest\n            </BookingRequestReportHost>\n        </ConversationBookingRequestDesktopWrapper>\n    );\n}\n","import styled from \"styled-components\";\nexport const ConversationMessagesContainerLoadingWrapper = styled.div`\n    grid-row: 3/4;\n    grid-column: 1/2;\n    width: 100%;\n    max-height: calc(100% - 162px);\n    overflow-y: scroll !important;\n    padding: 0 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    // padding-bottom: 132px;\n    @media (min-width: 768px) {\n        grid-column: 2/3;\n        max-height: calc(100% - 110px);\n    }\n`;\n","import { ConversationMessagesContainerLoadingWrapper } from \"./ConversationMessagesContainerLoadingStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nexport default function ConversationMessagesContainerLoading() {\n    return (\n        <ConversationMessagesContainerLoadingWrapper>\n            <ChatMessageLoadingSpinner style={{ width: \"50px\", height: \"50px\" }} />\n        </ConversationMessagesContainerLoadingWrapper>\n    );\n}\n","import { ConversationChatBubbleProfilePicture, ReceivedMessageWrapper, MessageWrapper } from \"../../../conversation/conversationStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport { useState, useEffect } from \"react\";\nimport { userHostModelSelector } from \"../../../../state/selectors/userHostModel\";\nimport { useRecoilState } from \"recoil\";\nimport { ColorTheme } from \"../../../../components/globaStyledComponents/globalStyledComponentsStyling\";\n\ninterface MessageProps {\n    loading?: boolean;\n    message: {\n        author: string;\n        body: string;\n    };\n    url: string;\n    prevMessage?: {\n        author: string;\n    };\n}\n\nexport default function Message({ loading, message, url, prevMessage }: MessageProps) {\n    const [msgLoading, setMsgLoading] = useState(false);\n    const [userHostModel, setUserHostModel] = useRecoilState(userHostModelSelector);\n    const isSameAuthor = prevMessage?.author === message.author;\n    //show spinner if message is not sent after 2 seconds\n    useEffect(() => {\n        let loadingTimer: NodeJS.Timeout | null = null;\n        if (loading) {\n            loadingTimer = setTimeout(() => {\n                setMsgLoading(true);\n            }, 2000);\n        } else {\n            setMsgLoading(false);\n        }\n        return () => {\n            console.log(\"clearing timeout\");\n            if (loadingTimer) clearTimeout(loadingTimer);\n        };\n    }, [loading]);\n    if (message.author !== userHostModel!.id) {\n        return (\n            <div\n                style={\n                    isSameAuthor ? { display: \"flex\", alignItems: \"flex-start\", gap: \"8px\", width: \"70%\" } : { display: \"flex\", alignItems: \"flex-start\", gap: \"8px\", width: \"70%\", marginTop: \"20px\" }\n                }\n            >\n                <ConversationChatBubbleProfilePicture src={url} />\n                <ReceivedMessageWrapper>{message.body}</ReceivedMessageWrapper>\n            </div>\n        );\n    } else {\n        return (\n            <div style={{ display: \"flex\", width: \"70%\", marginLeft: \"auto\" }}>\n                <div style={{ marginLeft: \"auto\", display: \"flex\", alignItems: \"center\", gap: \"16px\" }}>\n                    <ChatMessageLoadingSpinner style={{ visibility: msgLoading ? \"visible\" : \"hidden\" }} />\n                    <MessageWrapper isSameAuthor={isSameAuthor}>{message.body}</MessageWrapper>\n                </div>\n            </div>\n        );\n    }\n}\n","import { useState } from \"react\";\nimport { callApi } from \"../../../../../utils/api/api\";\nimport { ConversationMessageInputWrapper, ConversationMessagesInput, ConversationMessagesInputSendButton, SendButtonImg } from \"../../../../conversation/conversationStyling\";\nimport { UserHostModel } from \"../../../../../interfaces/models/userHostModel\";\n\ninterface MessageInputProps {\n    userHostModel: UserHostModel | null;\n    conversationmodelID: string;\n    accessToken: string;\n    addMessage: (message: any) => Promise<void>;\n    scrollToBottomConversation: () => void;\n}\n\nconst MessageInput: React.FC<MessageInputProps> = (props) => {\n    const [message, setMessage] = useState(\"\");\n    const [numberOfMessageSend, setNumberOfMessageSend] = useState(0);\n    const makeid = (length: number): string => {\n        var result = \"\";\n        var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    };\n    const createMessage = async () => {\n        setMessage(\"\");\n        setNumberOfMessageSend((prevState) => prevState + 1);\n        // console.log(\"MessageInput -> createMessage: \", props.userHostModel)\n        if (message.trim().length > 0) {\n            if (numberOfMessageSend < 5) {\n                const tempId = makeid(10);\n                await props.addMessage({\n                    author: props.userHostModel!.id,\n                    body: message.trim(),\n                    conversationmodelID: props.conversationmodelID,\n                    createdAt: new Date().toISOString(),\n                    updatedAt: new Date().toISOString(),\n                    isNote: null,\n                    guestNoteBody: null,\n                    hostNoteBody: null,\n                    id: null,\n                    loading: true,\n                    tempId: tempId,\n                });\n                props.scrollToBottomConversation();\n                await callApi(\"put\", `${process.env.REACT_APP_ENV}-anystay-booking`, \"conversation/host/message\", {\n                    headers: {\n                        Authorization: props.accessToken,\n                        conversationId: props.conversationmodelID,\n                    },\n                    body: {\n                        author: props.userHostModel!.id,\n                        body: message.trim(),\n                        conversationmodelId: props.conversationmodelID,\n                        tempId: tempId,\n                    },\n                })\n                    .then((res) => {\n                        setNumberOfMessageSend((prevState) => prevState - 1);\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                    });\n            } else {\n                alert(\"Sending too quickly!\");\n            }\n        }\n    };\n    return (\n        <ConversationMessageInputWrapper>\n            <ConversationMessagesInput\n                type=\"text\"\n                placeholder=\"Type your message\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && createMessage()}\n            />\n            <ConversationMessagesInputSendButton type=\"button\" onClick={() => createMessage()}>\n                <SendButtonImg src={\"https://d292awxalydr86.cloudfront.net/Inbox/Send.svg\"} alt={\"Send button\"} />\n            </ConversationMessagesInputSendButton>\n        </ConversationMessageInputWrapper>\n    );\n};\n\nexport default MessageInput;\n","import MessageInput from \"./MessageInput/MessageInput\";\nimport { ConversationMessageInputContentWrapper, BookingRequestButtonWrapper, BookingRequestDetailsButton, BookingRequestDetailsButtonComplete } from \"../../../conversation/conversationStyling\";\nimport { ColorTheme } from \"../../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nimport { UserHostModel } from \"../../../../interfaces/models/userHostModel\";\nimport { ConversationModel } from \"../../../../interfaces/models/conversationModel\";\nimport { BookingRequestModel } from \"../../../../interfaces/models/bookingRequestModel\";\n\ninterface MessageInputComponentProps {\n    userHostModel: UserHostModel | null;\n    accessToken: string;\n    addMessage: (message: any) => Promise<void>;\n    scrollToBottomConversation: () => void;\n    conversation: ConversationModel | null;\n    bookingRequest: BookingRequestModel;\n}\n\nexport default function MessageInputComponent({ accessToken, conversation, addMessage, scrollToBottomConversation, bookingRequest, userHostModel }: MessageInputComponentProps) {\n    const getBookingRequestBtn = () => {\n        if (bookingRequest) {\n            if (bookingRequest.ChangeBookingRequestModel.items.length === 0) {\n                if (bookingRequest.cancelled || bookingRequest.declined) return null;\n                if (bookingRequest.confirmed === null && bookingRequest.completed) {\n                    return (\n                        <BookingRequestButtonWrapper>\n                            <BookingRequestDetailsButton style={{ background: ColorTheme.Yellow.color }} to={`/booking-request/${bookingRequest.id}`}>\n                                Response\n                            </BookingRequestDetailsButton>\n                        </BookingRequestButtonWrapper>\n                    );\n                } else if ((bookingRequest.confirmed && bookingRequest.completed) || !bookingRequest.completed) {\n                    return (\n                        <BookingRequestButtonWrapper>\n                            <BookingRequestDetailsButton style={{ background: ColorTheme.Blue.color }} to={`/booking-request/${bookingRequest.id}`}>\n                                Details\n                            </BookingRequestDetailsButton>\n                        </BookingRequestButtonWrapper>\n                    );\n                }\n            } else {\n                if (bookingRequest.ChangeBookingRequestModel.items[0].confirmed) {\n                    return (\n                        <BookingRequestButtonWrapper>\n                            <BookingRequestDetailsButton style={{ background: ColorTheme.Blue.color }} to={`/booking-request/${bookingRequest.id}`}>\n                                Details\n                            </BookingRequestDetailsButton>\n                        </BookingRequestButtonWrapper>\n                    );\n                } else {\n                    return (\n                        <BookingRequestButtonWrapper>\n                            <BookingRequestDetailsButtonComplete style={{ background: ColorTheme.Yellow.color }} to={`/booking-request/${bookingRequest.id}`}>\n                                Review changes\n                            </BookingRequestDetailsButtonComplete>\n                        </BookingRequestButtonWrapper>\n                    );\n                }\n            }\n        }\n    };\n    return (\n        <ConversationMessageInputContentWrapper>\n            <MessageInput\n                accessToken={accessToken}\n                conversationmodelID={conversation!.id}\n                addMessage={addMessage}\n                scrollToBottomConversation={scrollToBottomConversation}\n                userHostModel={userHostModel}\n            />\n            {getBookingRequestBtn()}\n        </ConversationMessageInputContentWrapper>\n    );\n}\n","import {\n    ConversationCreatedBubble,\n    ConversationMessagesContainer,\n    ConversationCreatedDate,\n    ConversationNoMessagesYetTitle,\n    ConversationNoMessagesYetSubtitle,\n    FetchMoreMessagesLoadingWrapper,\n} from \"../../conversation/conversationStyling\";\nimport ConversationMessagesContainerLoading from \"../loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoading\";\nimport ChatMessageLoadingSpinner from \"../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport { Fragment, useState, useRef, useEffect, useCallback } from \"react\";\nimport { userHostModelSelector } from \"../../../state/selectors/userHostModel\";\nimport { useRecoilState } from \"recoil\";\nimport { useParams } from \"react-router-dom\";\nimport Message from \"./Message/Message\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport Observable from \"zen-observable-ts\";\nimport { callApi } from \"../../../utils/api/api\";\nimport * as customSubscriptions from \"../../../graphql/customSubscriptions\";\nimport MessageInputComponent from \"./MessageInputComponent/MessageInputComponent\";\nimport { ConversationModel } from \"../../../interfaces/models/conversationModel\";\n\ninterface HostConversationChatBoxProps {\n    accessToken: string;\n    guestProfilePictureURL: string;\n}\n\ninterface MessageProps {\n    id: string | null;\n    tempId: string;\n    author: string;\n    body: string;\n    conversationmodelID: string;\n    createdAt: string;\n    updatedAt: string;\n    isNote: boolean | null;\n    guestNoteBody: string | null;\n    hostNoteBody: string | null;\n    loading: boolean;\n}\n\ninterface MessageModelsItem {\n    createdAt: string;\n}\n\nexport default function HostConversationChatBox({ accessToken, guestProfilePictureURL }: HostConversationChatBoxProps) {\n    const [loadingPage, setLoadingPage] = useState(true);\n    const [messages, setMessages] = useState<MessageProps[]>([]);\n    const conversationMessageContainerRef = useRef<HTMLDivElement | null>(null);\n    const nextToken = useRef<string | null>(null);\n    const currentScrollPos = useRef<number>(0);\n    const messageFetching = useRef(false);\n    const [isTop, setIsTop] = useState(false);\n    const [conversation, setConversation] = useState<ConversationModel | null>(null);\n    const [bookingRequest, setBookingRequest] = useState<any>(null);\n    const [listingOwnerData, setListingOwnerData] = useState<any>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const previousIdRef = useRef<string | null>(null);\n    const [userHostModel, setUserHostModel] = useRecoilState(userHostModelSelector);\n\n    const scrollToBottomConversation = () => {\n        conversationMessageContainerRef.current?.scrollTo({ top: conversationMessageContainerRef.current?.scrollHeight });\n    };\n    const addMessage = async (message: MessageProps) => {\n        setMessages([...messages, message]);\n    };\n    const hasMessagesOverFlow = () => {\n        return conversationMessageContainerRef.current?.scrollHeight! > conversationMessageContainerRef.current?.clientHeight!;\n    };\n\n    const keepScrollPositionAfterFetchMore = () => {\n        conversationMessageContainerRef.current?.scrollTo({ top: conversationMessageContainerRef.current?.scrollHeight - currentScrollPos.current });\n    };\n\n    const handleMessagesScroll = useCallback(() => {\n        //each time the scroll is at the top, fetch more messages, interval is 30 messages, therefore the length need to be dynamic\n        if (hasMessagesOverFlow() && !messageFetching.current) {\n            if (nextToken.current === null) {\n                return;\n            }\n            //capture the current scroll position\n            if (conversationMessageContainerRef.current?.scrollHeight) {\n                currentScrollPos.current = conversationMessageContainerRef.current?.scrollHeight;\n            }\n            setIsTop(conversationMessageContainerRef.current?.scrollTop === 0);\n        }\n    }, []);\n    const refreshMessages = useCallback((fetchedMessages: MessageProps[], messages: MessageProps[]) => {\n        let newMessages = [...messages];\n        let newMessagesToAdd = [];\n        for (let i = 0; i < fetchedMessages.length; i++) {\n            let toAdd = true;\n            for (let j = 0; j < messages.length; j++) {\n                // if the message is loading and the message is already in the state, remove the loading state\n                if (fetchedMessages[i].tempId === messages[j].tempId && messages[j].loading) {\n                    newMessages[j] = fetchedMessages[i];\n                }\n                // if new msg and the msg in the state have same id, that means the msg is already received, so don't add it\n                // if new msg and the msg in the state have same tempid, that means the msg sent by me is already received, so don't add it\n                if (fetchedMessages[i].id === messages[j].id || fetchedMessages[i].tempId === messages[j].tempId) {\n                    toAdd = false;\n                }\n            }\n            if (toAdd) {\n                newMessagesToAdd.push(fetchedMessages[i]);\n            }\n        }\n        return newMessages.concat(newMessagesToAdd);\n    }, []);\n    const fetchMoreMessages = useCallback(\n        async (token: string) => {\n            messageFetching.current = true;\n            await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation`, {\n                headers: {\n                    Authorization: accessToken,\n                    conversationID: conversation!.id,\n                },\n                body: {\n                    conversationId: conversation!.id,\n                    nextToken: token,\n                },\n            })\n                .then((res) => {\n                    if (res.success) {\n                        nextToken.current = res.body.nextToken;\n                        setIsTop(false);\n                        setMessages((prevMsg) => {\n                            return [\n                                ...res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()),\n                                prevMsg,\n                            ];\n                        });\n\n                        keepScrollPositionAfterFetchMore();\n                        messageFetching.current = false;\n                    }\n                })\n                .catch((err) => console.log(err));\n        },\n        [conversation, accessToken]\n    );\n    const getConversation = useCallback(\n        async (pageChange = false) => {\n            let conversationMessageScrollWhenReceive =\n                Math.floor(conversationMessageContainerRef.current?.scrollTop!) + conversationMessageContainerRef.current?.clientHeight! >=\n                    conversationMessageContainerRef.current?.scrollHeight! - 50 ||\n                (!conversationMessageContainerRef.current?.scrollTop && !conversationMessageContainerRef.current?.scrollHeight && !conversationMessageContainerRef.current?.clientHeight);\n            if (id !== \"null\" && id) {\n                await callApi(\"get\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation/${id}`, {\n                    headers: {\n                        Authorization: accessToken,\n                        conversationId: id,\n                    },\n                }).then(async (res) => {\n                    if (res) {\n                        nextToken.current = res.body.nextToken;\n                        setBookingRequest(res.body.conversation.BookingRequestModel);\n                        setListingOwnerData(res.body.conversation.UserHostModel.UserModel);\n                        setConversation(res.body.conversation);\n                        setMessages((prevMsg) => {\n                            const messages = pageChange\n                                ? res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n                                : refreshMessages(\n                                      res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()),\n                                      prevMsg\n                                  );\n                            if (messages.length > 0 && messages[messages.length - 1].author !== userHostModel!.id) {\n                                if (conversationMessageScrollWhenReceive) {\n                                    scrollToBottomConversation();\n                                }\n                            }\n                            return messages;\n                        });\n                    }\n                });\n            }\n        },\n        [id, accessToken, userHostModel, refreshMessages]\n    );\n\n    const initConversationSubscription = useCallback(() => {\n        const subscription = API.graphql(\n            graphqlOperation(customSubscriptions.onMessageByConversationModelID, {\n                conversationmodelID: id,\n            })\n        ) as Observable<any>;\n\n        subscription.subscribe({\n            next: async ({ provider, value }) => {\n                await getConversation();\n            },\n            error: (error: any) => console.log(error),\n        });\n    }, [getConversation, id]);\n\n    useEffect(() => {\n        //init on load and when id changes\n        const init = async () => {\n            setLoadingPage(true);\n            if (userHostModel) {\n                initConversationSubscription();\n                await getConversation(id !== previousIdRef.current);\n            }\n            if (id) {\n                previousIdRef.current = id;\n            }\n            setLoadingPage(false);\n        };\n        init();\n    }, [getConversation, initConversationSubscription, id, userHostModel]);\n\n    useEffect(() => {\n        if (!loadingPage) {\n            const { current } = conversationMessageContainerRef;\n            scrollToBottomConversation();\n            current?.addEventListener(\"scroll\", handleMessagesScroll);\n            return () => {\n                current?.removeEventListener(\"scroll\", handleMessagesScroll);\n            };\n        }\n    }, [handleMessagesScroll, loadingPage]);\n\n    useEffect(() => {\n        if (isTop && nextToken.current) {\n            fetchMoreMessages(nextToken.current);\n        }\n    }, [fetchMoreMessages, isTop]);\n\n    if (loadingPage) return <ConversationMessagesContainerLoading />;\n    if (messages.length === 0) {\n        return (\n            <ConversationMessagesContainer>\n                <ConversationNoMessagesYetTitle>No messages yet</ConversationNoMessagesYetTitle>\n                <ConversationNoMessagesYetSubtitle>All of your messages will appear here</ConversationNoMessagesYetSubtitle>\n            </ConversationMessagesContainer>\n        );\n    }\n    return (\n        <>\n            <ConversationMessagesContainer ref={conversationMessageContainerRef}>\n                {isTop && (\n                    <FetchMoreMessagesLoadingWrapper>\n                        <ChatMessageLoadingSpinner />\n                    </FetchMoreMessagesLoadingWrapper>\n                )}\n                {conversation && (\n                    <ConversationCreatedDate style={{ marginTop: \"0px\" }}>{`${new Date(conversation.createdAt).toLocaleDateString(\"au\", {\n                        day: \"numeric\",\n                        month: \"short\",\n                        year: \"numeric\",\n                    })}, ${new Date(conversation.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                )}\n                {conversation &&\n                    listingOwnerData &&\n                    messages.map((message, index) => {\n                        const prevMessage = index > 0 ? messages[index - 1] : undefined;\n                        if (index === 0) {\n                            if (message.isNote) {\n                                return <ConversationCreatedBubble key={index}>{message.hostNoteBody}</ConversationCreatedBubble>;\n                            } else {\n                                return message.body ? <Message key={index} url={guestProfilePictureURL} message={message} prevMessage={prevMessage} /> : null;\n                            }\n                        }\n\n                        const messageDate = new Date(message.createdAt);\n                        const previousMessage = new Date(messages[index - 1].createdAt);\n                        const oneHour = 1000 * 60 * 60;\n                        const timeDiff = (messageDate.getTime() - previousMessage.getTime()) / oneHour;\n                        if (message.isNote) {\n                            if (timeDiff >= 1) {\n                                if (messageDate.getDate() !== previousMessage.getDate()) {\n                                    return (\n                                        <Fragment key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleDateString(\"au\", { day: \"numeric\", month: \"short\", year: \"numeric\" })}, ${new Date(\n                                                message.createdAt\n                                            ).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <ConversationCreatedBubble>{message.hostNoteBody}</ConversationCreatedBubble>\n                                        </Fragment>\n                                    );\n                                } else {\n                                    return (\n                                        <Fragment key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <ConversationCreatedBubble>{message.hostNoteBody}</ConversationCreatedBubble>\n                                        </Fragment>\n                                    );\n                                }\n                            } else {\n                                return <ConversationCreatedBubble key={index}>{message.hostNoteBody}</ConversationCreatedBubble>;\n                            }\n                        } else {\n                            if (!message.body) return null;\n                            if (timeDiff >= 1) {\n                                if (messageDate.getDate() !== previousMessage.getDate()) {\n                                    return (\n                                        <Fragment key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleDateString(\"au\", { day: \"numeric\", month: \"short\", year: \"numeric\" })}, ${new Date(\n                                                message.createdAt\n                                            ).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n\n                                            <Message loading={message.loading} url={guestProfilePictureURL} message={message} prevMessage={prevMessage} />\n                                        </Fragment>\n                                    );\n                                } else {\n                                    return (\n                                        <Fragment key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <Message loading={message.loading} url={guestProfilePictureURL} message={message} prevMessage={prevMessage} />\n                                        </Fragment>\n                                    );\n                                }\n                            } else {\n                                return <Message loading={message.loading} url={guestProfilePictureURL} message={message} key={index} prevMessage={prevMessage} />;\n                            }\n                        }\n                    })}\n            </ConversationMessagesContainer>\n            <MessageInputComponent\n                accessToken={accessToken}\n                conversation={conversation}\n                addMessage={addMessage}\n                scrollToBottomConversation={scrollToBottomConversation}\n                bookingRequest={bookingRequest}\n                userHostModel={userHostModel}\n            />\n        </>\n    );\n}\n","import { useState, useCallback, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { callApi } from \"../../utils/api/api\";\nimport { ConversationWrapper } from \"../conversation/conversationStyling\";\nimport TopNavHeader from \"./mobileComponent/TopNavHeader\";\nimport ChatBoxTopHeader from \"./desktopComponent/ChatBoxTopHeader\";\nimport HostConversationInbox from \"./HostConversationInbox/HostConversationInbox\";\nimport TopBookingInfo from \"./mobileComponent/TopBookingInfo\";\nimport HostConversationBookingDetails from \"./HostConversationBookingDetails/HostConversationBookingDetails\";\nimport HostConversationChatBox from \"./HostConversationChatBox/HostConversationChatBox\";\nimport { userHostModelSelector } from \"../../state/selectors/userHostModel\";\nimport { accessTokenSelector } from \"../../state/selectors/accessToken\";\nimport { useRecoilState } from \"recoil\";\nimport { useNavigate } from \"react-router-dom\";\nimport HelmetTags from \"../../components/Helmet/HelmetTags\";\nimport constructOptimisedProtectedImageUrl from \"../../utils/imageOptimisation/constructOptimisedProtectedImageUrl\";\n\nexport default function HostConversation() {\n    const [userHostModel, setUserHostModel] = useRecoilState(userHostModelSelector);\n    const [accessToken, setAccessToken] = useRecoilState(accessTokenSelector);\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const [loadingPage, setLoadingPage] = useState(true);\n    const [bookingRequest, setBookingRequest] = useState(null);\n    const [listingData, setListingData] = useState(null);\n    const [bookingGuestData, setBookingGuestData] = useState(null);\n    const [guestProfilePictureURL, setGuestProfilePictureURL] = useState(\"https://d292awxalydr86.cloudfront.net/Settings+page/Profile+photo+placeholder.png\");\n    const [hostPriceBreakdown, setHostPriceBreakdown] = useState(null);\n\n    const getConversation = useCallback(async () => {\n        if (id !== \"null\" && id) {\n            await callApi(\"get\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation/${id}`, {\n                headers: {\n                    Authorization: accessToken,\n                    conversationId: id,\n                },\n            }).then(async (res) => {\n                if (!res || !res.body.conversation.BookingRequestModel || !res.body.conversation.BookingRequestModel.ListingModel) {\n                    console.log(\"Conversations related booking or listing has been deleted.\");\n                    return;\n                }\n                if (res.body.conversation.UserModel.profilePicture) {\n                    const guestProfilePic = constructOptimisedProtectedImageUrl(res.body.conversation.UserModel.profilePicture, res.body.conversation.UserModel.identityID, 100);\n                    setGuestProfilePictureURL(guestProfilePic);\n                }\n                setBookingGuestData(res.body.conversation.UserModel);\n                setBookingRequest(res.body.conversation.BookingRequestModel);\n                setListingData(res.body.conversation.BookingRequestModel.ListingModel);\n                setHostPriceBreakdown(JSON.parse(res.body.conversation.BookingRequestModel.hostPriceBreakdown));\n            });\n        }\n    }, [id, accessToken]);\n\n    useEffect(() => {\n        const init = async () => {\n            setLoadingPage(true);\n            await getConversation();\n            setLoadingPage(false);\n        };\n        if (userHostModel) {\n            init();\n        } else {\n            navigate(\"/\");\n        }\n    }, [getConversation, navigate, userHostModel]);\n\n    return (\n        <ConversationWrapper>\n            <HelmetTags title=\"Inbox | Anystay\" />\n            {window.innerWidth < 768 && <TopNavHeader bookingGuestData={bookingGuestData} />}\n            <HostConversationInbox accessToken={accessToken} />\n            {window.innerWidth < 768 && <TopBookingInfo bookingRequest={bookingRequest} listingData={listingData} />}\n            <ChatBoxTopHeader bookingGuestData={bookingGuestData} />\n            <HostConversationChatBox accessToken={accessToken} guestProfilePictureURL={guestProfilePictureURL} />\n            <HostConversationBookingDetails\n                bookingRequest={bookingRequest}\n                bookingGuestData={bookingGuestData}\n                guestProfilePictureURL={guestProfilePictureURL}\n                listingData={listingData}\n                loadingPage={loadingPage}\n                hostPriceBreakdown={hostPriceBreakdown}\n            />\n        </ConversationWrapper>\n    );\n}\n"],"names":["TopNavHeader","_ref","bookingGuestData","navigate","useNavigate","userHostModel","setUserHostModel","useRecoilState","userHostModelSelector","_jsxs","ConversationTitleWrapper","children","_jsx","BackBtn","onClick","id","type","ConversationTitle","firstName","ConversationBookingRequestMobileHeaderHostPhoneBtn","href","phone","ConversationCallIcon","src","alt","ChatBoxTopHeader","ConversationBookingRequestDesktopHeaderWrapper","ConversationBookingRequestDesktopHeaderTitle","ConversationBookingRequestDesktopHeaderHostPhoneBtn","ConversationBubble","_conversation$UserMod2","conversation","useParams","profilePhoto","setProfilePhoto","useState","useEffect","_conversation$UserMod","UserModel","profilePicture","profilePic","constructOptimisedProtectedImageUrl","identityID","RecentConversationBubble","to","selected","RecentConversationBubblesGuestImage","RecentConversationBubbleTextWrapper","style","display","width","justifyContent","RecentConversationBubblesTitle","BookingRequestModel","RecentConversationBubblesSubtitle","fetchTimeDifference","startDate","Date","updatedAt","timeDiff","getTime","Math","floor","MessageModels","items","length","body","hostNoteBody","getConversationSubtitle","ListingModel","subtitle","declined","cancelled","completed","confirmed","expired","propertyTitle","substring","trim","ConversationInboxContainerLoadingWrapper","styled","div","ConversationInboxDesktopWrapperLoading","ChatMessageLoadingSpinner","height","HostConversationInbox","accessToken","conversationsContainerRef","useRef","conversationNextToken","conversationsFetching","isConversationBottom","setIsConversationBottom","hostConversations","setHostConversations","loadingPage","setLoadingPage","handleConversationScroll","useCallback","hasConversationOverFlow","_conversationsContain","_conversationsContain2","current","scrollHeight","clientHeight","_conversationsContain3","_conversationsContain4","_conversationsContain5","ceil","scrollTop","updateHostConversationsSubscription","async","API","graphql","graphqlOperation","customSubscriptions","userhostmodelID","userHostModelId","subscribe","next","_ref2","provider","value","prevConversations","updatedConversation","data","onUpdateConversationByUserHostModelID","conversationsCopy","map","toISOString","status","sortConversations","error","console","warn","sort","a","b","fetchConversations","callApi","headers","Authorization","nextToken","then","res","log","success","conversations","fetchMoreConversations","prevState","catch","err","addEventListener","removeEventListener","init","RecentConversationsWrapper","ref","RecentConversationsTitle","RecentConversationBubblesWrapper","hostConversation","FetchMoreConversationLoadingWrapper","TopBookingInfo","bookingRequest","listingData","getMonth","month","months","ConversationBookingRequestHeaderWrapper","listingmodelID","ConversationBookingRequestHeaderImage","constructOptimisedImageUrl","JSON","parse","listingImages","key","ConversationBookingRequestHeaderTextWrapper","ConversationBookingRequestHeaderTitle","substr","split","ConversationBookingRequestHeaderSubtitle","color","ColorTheme","Black","Yellow","getBookingRequestState","getArrivalDate","arrivalDate","replace","getDate","getDepartureDate","departureDate","ConversationBookingRequestDesktopWrapperLoadingWrapper","Grey2","ConversationBookingRequestDesktopWrapperLoading","HostConversationBookingDetails","guestProfilePictureURL","hostPriceBreakdown","bookingDetailRef","copied","setCopied","time","isOpen","setIsOpen","handleClick","window","Intercom","wrapperRef","useClickOutside","ConversationBookingRequestDesktopWrapper","marginBottom","BookingRequestDetailsButton","background","BookingRequestDetailsButtonComplete","HostConversationGuestProfileWrapper","HostConversationGuestProfilePictureWrapper","HostConversationGuestProfilePicture","HostConversationGuestProfileTextWrapper","HostConversationGuestProfileTextTitle","HostConversationGuestProfileName","ConversationBookingRequestHeaderPrice","bookingAmount","toFixed","refundedAmount","HostConversationGuestProfileTextSubtitle","textDecoration","getNights","nights","setUTCHours","guests","BookingRequestDatesWrapper","gridColumn","gridRow","flexDirection","BookingRequestDatesTitle","BookingRequestDatesSubtitle","getArrivalFullDate","getFullYear","BookingRequestDatesSubtitleTime","checkInTime","BookingRequestDatesDivider","paddingLeft","getDepartureFullDate","checkOutTime","HostConversationBookingRequestGuests","HostConversationBookingRequestGuestsText","infants","pets","createdAt","toLocaleDateString","day","year","confirmationCode","HostBookingRefButton","navigator","clipboard","writeText","setTimeout","AnimatePresence","CopiedToClipboardPortal","border","HostConversationBookingRequestGuestLink","_Fragment","InboxSectionDivider","BookingRequestDetailWrapper","paddingTop","BookingRequestCommunicationNoticeTitle","priceItems","item","index","PriceDetailsSubtotalPriceWrapper","PriceDetailsSubtotalPrice","label","amountFormatted","subTotalItems","fontWeight","BookingRequestCommunicationNotice","getCancellationPolicy","flexibleDate","setUTCDate","getUTCDate","moderateDate","strictDate","cancellationPolicy","deposit","Number","BookingRequestReportHost","ConversationMessagesContainerLoadingWrapper","ConversationMessagesContainerLoading","Message","loading","message","url","prevMessage","msgLoading","setMsgLoading","isSameAuthor","author","loadingTimer","clearTimeout","alignItems","gap","marginTop","ConversationChatBubbleProfilePicture","ReceivedMessageWrapper","marginLeft","visibility","MessageWrapper","props","setMessage","numberOfMessageSend","setNumberOfMessageSend","createMessage","tempId","result","characters","i","charAt","random","makeid","addMessage","conversationmodelID","isNote","guestNoteBody","scrollToBottomConversation","conversationId","conversationmodelId","alert","ConversationMessageInputWrapper","ConversationMessagesInput","placeholder","onChange","e","target","onKeyPress","ConversationMessagesInputSendButton","SendButtonImg","MessageInputComponent","ConversationMessageInputContentWrapper","MessageInput","getBookingRequestBtn","ChangeBookingRequestModel","BookingRequestButtonWrapper","Blue","HostConversationChatBox","messages","setMessages","conversationMessageContainerRef","currentScrollPos","messageFetching","isTop","setIsTop","setConversation","setBookingRequest","listingOwnerData","setListingOwnerData","previousIdRef","_conversationMessageC","_conversationMessageC2","scrollTo","top","handleMessagesScroll","hasMessagesOverFlow","_conversationMessageC3","_conversationMessageC4","_conversationMessageC7","_conversationMessageC9","_conversationMessageC8","refreshMessages","fetchedMessages","newMessages","newMessagesToAdd","toAdd","j","push","concat","fetchMoreMessages","conversationID","token","prevMsg","keepScrollPositionAfterFetchMore","_conversationMessageC5","_conversationMessageC6","getConversation","_conversationMessageC10","_conversationMessageC11","_conversationMessageC12","_conversationMessageC13","_conversationMessageC14","_conversationMessageC15","pageChange","arguments","undefined","conversationMessageScrollWhenReceive","UserHostModel","initConversationSubscription","ConversationMessagesContainer","ConversationNoMessagesYetTitle","ConversationNoMessagesYetSubtitle","FetchMoreMessagesLoadingWrapper","ConversationCreatedDate","toLocaleTimeString","hour","minute","ConversationCreatedBubble","messageDate","previousMessage","Fragment","HostConversation","setAccessToken","accessTokenSelector","setListingData","setBookingGuestData","setGuestProfilePictureURL","setHostPriceBreakdown","guestProfilePic","ConversationWrapper","HelmetTags","title","innerWidth"],"mappings":"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","debug_id":"d55f9ac2-de7f-5f98-aadf-2a8e8d5b557b"}