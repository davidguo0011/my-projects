{"version":3,"file":"static/js/8629.fb8f2375.chunk.js","sources":["pages/conversation/mobileComponent/TopNavHeader.tsx","pages/conversation/desktopComponent/ChatBoxTopHeader.tsx","pages/conversation/mobileComponent/TopBookingInfo.tsx","pages/conversation/ConversationInbox/ConversationBubble/ConversationBubble.tsx","pages/conversation/ConversationInbox/ConversationInbox.tsx","pages/conversation/loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoadingStyling.ts","pages/conversation/loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoading.tsx","pages/conversation/ConversationBookingDetails/ConversationBookingDetails.tsx","pages/conversation/ConversationChatBox/Message/Message.tsx","pages/conversation/ConversationChatBox/MessageInputComponent/MessageInput/MessageInput.tsx","pages/conversation/ConversationChatBox/MessageInputComponent/MessageInputComponent.tsx","pages/conversation/loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoadingStyling.ts","pages/conversation/loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoading.tsx","pages/conversation/ConversationChatBox/ConversationChatBox.tsx","pages/conversation/conversation.tsx"],"sourceRoot":"","sourcesContent":["import {\n    ConversationTitleWrapper,\n    ConversationTitleBackButton,\n    ConversationTitleIcon,\n    ConversationTitle,\n    ConversationBookingRequestMobileHeaderHostPhoneBtn,\n    ConversationCallIcon,\n} from \"../conversationStyling\";\nimport { userModelSelector } from \"../../../state/selectors/userModel\";\nimport { useRecoilState } from \"recoil\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BookingRequestModel } from \"../../../interfaces/models/bookingRequestModel\";\nimport { ListingModel } from \"../../../interfaces/models/listingModel\";\nimport { ColorTheme } from \"../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nimport BackBtn from \"../../../components/btn/backBtn/backBtn\";\ninterface ExtendedBookingRequest extends BookingRequestModel {\n    expired: boolean;\n    checkInTime: number;\n    checkOutTime: number;\n    ListingModel: ListingModel;\n}\n\ninterface TopNavHeaderProps {\n    listingOwnerData: {\n        firstName: string;\n        phone: string;\n    } | null;\n    bookingRequest: ExtendedBookingRequest | null;\n}\n\nexport default function TopNavHeader({ listingOwnerData, bookingRequest }: TopNavHeaderProps) {\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n    const navigate = useNavigate();\n    return (\n        <ConversationTitleWrapper>\n            <BackBtn\n                onClick={() => {\n                    navigate(`/your-inbox/${userModel!.id}`);\n                }}\n                type=\"Arrow\"\n            />\n            {listingOwnerData && (\n                <>\n                    <ConversationTitle>{listingOwnerData.firstName}</ConversationTitle>\n                    <ConversationBookingRequestMobileHeaderHostPhoneBtn href={`tel:${listingOwnerData.phone}`}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                            <path\n                                d=\"M21.6858 16.5986C21.6652 16.478 21.6385 16.3585 21.6058 16.2406C21.5132 15.9282 21.3338 15.6485 \n                        21.0884 15.4342C20.843 15.2198 20.5418 15.0795 20.2198 15.0296L15.8878 14.3086C15.5777 \n                        14.2551 15.2588 14.2865 14.965 14.3993C14.6712 14.5121 14.4134 14.7023 14.2188 \n                        14.9496C14.1648 15.0186 14.1128 15.0886 14.0648 15.1606C14.0296 15.2225 13.9736 15.2698 \n                        13.9067 15.2942C13.8399 15.3186 13.7665 15.3184 13.6998 15.2936C11.4577 14.3238 9.66961 \n                        12.5358 8.69981 10.2936C8.67581 10.2279 8.67557 10.1558 8.69913 10.0898C8.72269 10.0239 8.76857 \n                        9.9683 8.82881 9.93264C8.92381 9.86864 9.01481 9.80064 9.10481 9.73264C9.34463 9.53754 9.5291 \n                        9.28298 9.63982 8.99434C9.75054 8.70569 9.78364 8.39306 9.73581 8.08764L9.06781 3.83164C9.02021 \n                        3.5149 8.88591 3.2175 8.67977 2.97236C8.47363 2.72721 8.20369 2.54388 7.89981 2.44264C7.73374 \n                        2.38819 7.56397 2.34574 7.39181 2.31564C6.76329 2.20436 6.11785 2.23487 5.50263 2.40493C4.88741\n                         2.575 4.31794 2.88034 3.83581 3.29864C3.3221 3.73777 2.91321 4.28633 2.63911 4.90407C2.36502 \n                         5.52182 2.23269 6.19308 2.25181 6.86864C2.35658 10.7805 3.95707 14.5034 6.7238 17.2709C9.49054 \n                         20.0383 13.213 21.6398 17.1248 21.7456C17.1658 21.7456 17.2068 21.7456 17.2478 21.7456C17.8993 \n                         21.7457 18.5432 21.6049 19.1352 21.3328C19.7272 21.0608 20.2535 20.664 20.6778 20.1696C21.1009 \n                         19.6869 21.4109 19.1158 21.5853 18.498C21.7596 17.8803 21.794 17.2314 21.6858 16.5986ZM19.5438 \n                         19.1916C19.2482 19.5303 18.882 19.8002 18.4711 19.9825C18.0601 20.1647 17.6143 20.2549 17.1648 \n                         20.2466C13.6372 20.151 10.2805 18.7069 7.78528 16.2115C5.29008 13.7161 3.84623 10.3592 3.75081 \n                         6.83164C3.73845 6.379 3.82739 5.92931 4.01113 5.51546C4.19487 5.1016 4.46877 4.73404 4.81281 \n                         4.43964C5.31554 3.99663 5.96176 3.75079 6.63181 3.74764C6.79944 3.74773 6.96674 3.76245 7.13181 3.79164C7.23342 \n                         3.80969 7.33366 3.83475 7.43181 3.86664C7.47421 3.88202 7.51152 3.90886 7.53958 3.94416C7.56765 \n                         3.97947 7.58539 4.02186 7.59081 4.06664L8.26181 8.32164C8.26893 8.36664 8.26419 8.41273 8.24806 \n                         8.45534C8.23193 8.49796 8.20496 8.53563 8.16981 8.56464C8.11181 8.61164 8.05281 8.65564 7.99181\n                          8.69764C7.63908 8.92679 7.37907 9.27363 7.25804 9.67647C7.137 10.0793 7.16279 10.512 7.33081 \n                          10.8976C8.45164 13.484 10.514 15.5475 13.0998 16.6696C13.4861 16.8353 13.9183 16.8596 14.3207 \n                          16.7382C14.7231 16.6167 15.0697 16.3574 15.2998 16.0056C15.3298 15.9616 15.3608 15.9186 15.3948 \n                          15.8756C15.4241 15.8411 15.462 15.8147 15.5046 15.7993C15.5472 15.7839 15.5932 15.7798 15.6378 \n                          15.7876L19.9698 16.5086C20.0105 16.5126 20.0494 16.5274 20.0825 16.5515C20.1156 16.5756 20.1416 \n                          16.6081 20.1578 16.6456C20.1748 16.7076 20.1908 16.7766 20.2048 16.8556C20.2748 17.2697 20.2519 \n                          17.6941 20.1375 18.0981C20.0232 18.5022 19.8204 18.8757 19.5438 19.1916Z\"\n                                fill={bookingRequest!.completed ? ColorTheme.Black.color : ColorTheme.Grey1.color}\n                            />\n                        </svg>\n                    </ConversationBookingRequestMobileHeaderHostPhoneBtn>\n                </>\n            )}\n        </ConversationTitleWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestDesktopHeaderWrapper,\n    ConversationBookingRequestDesktopHeaderTitle,\n    ConversationBookingRequestDesktopHeaderHostPhoneBtn,\n    ConversationCallIcon,\n} from \"../conversationStyling\";\nimport { BookingRequestModel } from \"../../../interfaces/models/bookingRequestModel\";\nimport { ListingModel } from \"../../../interfaces/models/listingModel\";\nimport { ColorTheme } from \"../../../components/globaStyledComponents/globalStyledComponentsStyling\";\n\ninterface ExtendedBookingRequest extends BookingRequestModel {\n    expired: boolean;\n    checkInTime: number;\n    checkOutTime: number;\n    ListingModel: ListingModel;\n}\n\ninterface ChatBoxTopHeaderProps {\n    listingOwnerData: {\n        firstName: string;\n        phone: string;\n    } | null;\n    bookingRequest: ExtendedBookingRequest | null;\n}\n\nexport default function ChatBoxTopHeader({ listingOwnerData, bookingRequest }: ChatBoxTopHeaderProps) {\n    if (!listingOwnerData) {\n        return null;\n    }\n\n    return (\n        <ConversationBookingRequestDesktopHeaderWrapper>\n            <div>\n                <ConversationBookingRequestDesktopHeaderTitle>{listingOwnerData.firstName}</ConversationBookingRequestDesktopHeaderTitle>\n            </div>\n            <ConversationBookingRequestDesktopHeaderHostPhoneBtn href={bookingRequest!.completed ? `tel:${listingOwnerData.phone}` : undefined}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                    <path\n                        d=\"M21.6858 16.5986C21.6652 16.478 21.6385 16.3585 21.6058 16.2406C21.5132 15.9282 21.3338 15.6485 \n                        21.0884 15.4342C20.843 15.2198 20.5418 15.0795 20.2198 15.0296L15.8878 14.3086C15.5777 \n                        14.2551 15.2588 14.2865 14.965 14.3993C14.6712 14.5121 14.4134 14.7023 14.2188 \n                        14.9496C14.1648 15.0186 14.1128 15.0886 14.0648 15.1606C14.0296 15.2225 13.9736 15.2698 \n                        13.9067 15.2942C13.8399 15.3186 13.7665 15.3184 13.6998 15.2936C11.4577 14.3238 9.66961 \n                        12.5358 8.69981 10.2936C8.67581 10.2279 8.67557 10.1558 8.69913 10.0898C8.72269 10.0239 8.76857 \n                        9.9683 8.82881 9.93264C8.92381 9.86864 9.01481 9.80064 9.10481 9.73264C9.34463 9.53754 9.5291 \n                        9.28298 9.63982 8.99434C9.75054 8.70569 9.78364 8.39306 9.73581 8.08764L9.06781 3.83164C9.02021 \n                        3.5149 8.88591 3.2175 8.67977 2.97236C8.47363 2.72721 8.20369 2.54388 7.89981 2.44264C7.73374 \n                        2.38819 7.56397 2.34574 7.39181 2.31564C6.76329 2.20436 6.11785 2.23487 5.50263 2.40493C4.88741\n                         2.575 4.31794 2.88034 3.83581 3.29864C3.3221 3.73777 2.91321 4.28633 2.63911 4.90407C2.36502 \n                         5.52182 2.23269 6.19308 2.25181 6.86864C2.35658 10.7805 3.95707 14.5034 6.7238 17.2709C9.49054 \n                         20.0383 13.213 21.6398 17.1248 21.7456C17.1658 21.7456 17.2068 21.7456 17.2478 21.7456C17.8993 \n                         21.7457 18.5432 21.6049 19.1352 21.3328C19.7272 21.0608 20.2535 20.664 20.6778 20.1696C21.1009 \n                         19.6869 21.4109 19.1158 21.5853 18.498C21.7596 17.8803 21.794 17.2314 21.6858 16.5986ZM19.5438 \n                         19.1916C19.2482 19.5303 18.882 19.8002 18.4711 19.9825C18.0601 20.1647 17.6143 20.2549 17.1648 \n                         20.2466C13.6372 20.151 10.2805 18.7069 7.78528 16.2115C5.29008 13.7161 3.84623 10.3592 3.75081 \n                         6.83164C3.73845 6.379 3.82739 5.92931 4.01113 5.51546C4.19487 5.1016 4.46877 4.73404 4.81281 \n                         4.43964C5.31554 3.99663 5.96176 3.75079 6.63181 3.74764C6.79944 3.74773 6.96674 3.76245 7.13181 3.79164C7.23342 \n                         3.80969 7.33366 3.83475 7.43181 3.86664C7.47421 3.88202 7.51152 3.90886 7.53958 3.94416C7.56765 \n                         3.97947 7.58539 4.02186 7.59081 4.06664L8.26181 8.32164C8.26893 8.36664 8.26419 8.41273 8.24806 \n                         8.45534C8.23193 8.49796 8.20496 8.53563 8.16981 8.56464C8.11181 8.61164 8.05281 8.65564 7.99181\n                          8.69764C7.63908 8.92679 7.37907 9.27363 7.25804 9.67647C7.137 10.0793 7.16279 10.512 7.33081 \n                          10.8976C8.45164 13.484 10.514 15.5475 13.0998 16.6696C13.4861 16.8353 13.9183 16.8596 14.3207 \n                          16.7382C14.7231 16.6167 15.0697 16.3574 15.2998 16.0056C15.3298 15.9616 15.3608 15.9186 15.3948 \n                          15.8756C15.4241 15.8411 15.462 15.8147 15.5046 15.7993C15.5472 15.7839 15.5932 15.7798 15.6378 \n                          15.7876L19.9698 16.5086C20.0105 16.5126 20.0494 16.5274 20.0825 16.5515C20.1156 16.5756 20.1416 \n                          16.6081 20.1578 16.6456C20.1748 16.7076 20.1908 16.7766 20.2048 16.8556C20.2748 17.2697 20.2519 \n                          17.6941 20.1375 18.0981C20.0232 18.5022 19.8204 18.8757 19.5438 19.1916Z\"\n                        fill={bookingRequest!.completed ? ColorTheme.Black.color : ColorTheme.Grey1.color}\n                    />\n                </svg>\n            </ConversationBookingRequestDesktopHeaderHostPhoneBtn>\n        </ConversationBookingRequestDesktopHeaderWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestHeaderWrapper,\n    ConversationBookingRequestHeaderImage,\n    ConversationBookingRequestHeaderTextWrapper,\n    ConversationBookingRequestHeaderSubtitle,\n    ConversationBookingRequestHeaderTitle,\n} from \"../conversationStyling\";\nimport { useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport constructOptimisedImageUrl from \"../../../utils/imageOptimisation/constructOptimisedImageUrl\";\nimport { BookingRequestModel } from \"../../../interfaces/models/bookingRequestModel\";\nimport { ConversationModel } from \"../../../interfaces/models/conversationModel\";\nimport { ListingModel } from \"../../../interfaces/models/listingModel\";\n\ninterface BookingRequest extends BookingRequestModel {\n    expired: boolean;\n}\n\ninterface TopBookingInfoProps {\n    bookingRequest: BookingRequest | null;\n    listingPictureURL?: string;\n    listingData: ListingModel | null;\n    conversation: ConversationModel | null;\n}\n\nexport default function TopBookingInfo({ bookingRequest, conversation, listingData }: TopBookingInfoProps) {\n    const navigate = useNavigate();\n    const getMonth = (month: number) => {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[month];\n    };\n    const getArrivalDate = () => {\n        let arrivalDate = new Date(bookingRequest!.arrivalDate.replace(\"Z\", \"\"));\n\n        return `${arrivalDate.getDate()} ${getMonth(arrivalDate.getMonth())}`;\n    };\n\n    const getDepartureDate = () => {\n        let departureDate = new Date(bookingRequest!.departureDate.replace(\"Z\", \"\"));\n\n        return `${departureDate.getDate()} ${getMonth(departureDate.getMonth())}`;\n    };\n\n    const imgKey = useMemo(() => {\n        if (listingData) {\n            return JSON.parse(listingData.listingImages[0] as string).key;\n        }\n    }, [listingData]);\n\n    if (!bookingRequest || !conversation || !listingData) return null;\n    return (\n        <ConversationBookingRequestHeaderWrapper\n            type=\"button\"\n            onClick={() => {\n                if (bookingRequest.completed) {\n                    navigate(`/your-booking/${bookingRequest.id}`);\n                } else {\n                    navigate(`/listing/${bookingRequest.listingmodelID}`);\n                }\n            }}\n        >\n            <ConversationBookingRequestHeaderImage src={constructOptimisedImageUrl(imgKey, 800)} alt=\"Picture of listing model\" />\n            <ConversationBookingRequestHeaderTextWrapper>\n                <ConversationBookingRequestHeaderTitle>{`${listingData.propertyTitle.substring(0, 15)}${\n                    listingData.propertyTitle.split(\"\").length > 15 ? \"...\" : \"\"\n                }`}</ConversationBookingRequestHeaderTitle>\n                <ConversationBookingRequestHeaderSubtitle confirmed={conversation.status === \"Requested\" ? false : true}>\n                    {conversation ? conversation.status : \"\"} • {getArrivalDate()} - {getDepartureDate()}{\" \"}\n                </ConversationBookingRequestHeaderSubtitle>\n            </ConversationBookingRequestHeaderTextWrapper>\n        </ConversationBookingRequestHeaderWrapper>\n    );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n    RecentConversationBubble,\n    RecentConversationBubblesListingImage,\n    RecentConversationBubblesTitle,\n    RecentConversationBubbleTextWrapper,\n    RecentConversationBubblesSubtitle,\n} from \"../../conversationStyling\";\nimport { useParams } from \"react-router-dom\";\nimport { ConversationModel } from \"../../../../interfaces/models/conversationModel\";\nimport constructOptimisedImageUrl from \"../../../../utils/imageOptimisation/constructOptimisedImageUrl\";\ninterface ConversationBubbleProps {\n    conversation: ConversationModel;\n}\n\nexport default function ConversationBubble({ conversation }: ConversationBubbleProps) {\n    const { id } = useParams();\n    const [profilePhoto, setProfilePhoto] = useState(\"https://d292awxalydr86.cloudfront.net/Settings+page/Profile+photo+placeholder.png\");\n    useEffect(() => {\n        if (conversation?.BookingRequestModel?.ListingModel?.listingImages) {\n            const img = constructOptimisedImageUrl(JSON.parse(conversation.BookingRequestModel.ListingModel.listingImages[0]).key, 300);\n            setProfilePhoto(img);\n        }\n    }, [conversation]);\n\n    const fetchTimeDifference = () => {\n        let startDate = new Date(conversation.updatedAt);\n        let endDate = new Date();\n        let timeDiff = (endDate.getTime() - startDate.getTime()) / 1000 / 60 / 60;\n        if (timeDiff > 24) {\n            return `${Math.floor(timeDiff / 24)}d`;\n        } else if (timeDiff < 1) {\n            return `${Math.floor(timeDiff * 60)}m`;\n        } else {\n            return `${Math.floor(timeDiff)}h`;\n        }\n    };\n\n    const getMonth = (month: number) => {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[month];\n    };\n\n    const getFormatedDate = (date: Date | string) => {\n        if (conversation.BookingRequestModel) {\n            let unFormatedDate = new Date(date!);\n            return `${unFormatedDate.getUTCDate()} ${getMonth(unFormatedDate.getMonth())}`;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getBookingRequestState = () => {\n        if (conversation?.BookingRequestModel?.declined) {\n            return \"Declined\";\n        }\n        if (conversation?.BookingRequestModel?.cancelled) {\n            return \"Cancelled\";\n        }\n        if (!conversation?.BookingRequestModel?.completed) {\n            return \"Enquiry\";\n        }\n        if (conversation?.BookingRequestModel?.confirmed) {\n            return \"Confirmed\";\n        }\n        if (conversation?.BookingRequestModel?.expired) {\n            return \"Expired\";\n        }\n        return \"Requested\";\n    };\n\n    const getConversationSubtitle = () => {\n        let subtitle = `${getBookingRequestState()} • ${getFormatedDate(conversation?.BookingRequestModel?.arrivalDate)} - ${getFormatedDate(conversation?.BookingRequestModel?.departureDate)}`;\n\n        if (subtitle.length > 44) {\n            return `${subtitle.slice(0, 40)}...`;\n        } else {\n            return subtitle;\n        }\n    };\n\n    const getTheMostRecentConversationMsg = () => {\n        const ellipsis = (message: string) => {\n            if (message.length > 25) {\n                return message.substring(0, 25) + \"...\";\n            } else {\n                return message;\n            }\n        };\n        if (conversation.MessageModels.items.length === 0) {\n            return null;\n        } else if (conversation.MessageModels.items[0].body !== null) {\n            return ellipsis(conversation.MessageModels.items[0].body);\n        } else if (conversation.MessageModels.items[0].guestNoteBody !== null) {\n            return ellipsis(conversation.MessageModels.items[0].guestNoteBody);\n        }\n    };\n\n    return (\n        <RecentConversationBubble to={`/conversation/${conversation.id}`} selected={conversation.id === id}>\n            <RecentConversationBubblesListingImage src={profilePhoto} alt=\"Photo for listing owner\" />\n            <RecentConversationBubbleTextWrapper>\n                <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"space-between\" }}>\n                    <RecentConversationBubblesTitle>{conversation.UserHostModel?.UserModel?.firstName}</RecentConversationBubblesTitle>\n                    {conversation.BookingRequestModel && <RecentConversationBubblesSubtitle>{fetchTimeDifference()}</RecentConversationBubblesSubtitle>}\n                </div>\n                <RecentConversationBubblesTitle>{getTheMostRecentConversationMsg()}</RecentConversationBubblesTitle>\n                <RecentConversationBubblesSubtitle>{getConversationSubtitle()}</RecentConversationBubblesSubtitle>\n            </RecentConversationBubbleTextWrapper>\n        </RecentConversationBubble>\n    );\n}\n","import { RecentConversationsWrapper, RecentConversationsTitle, RecentConversationBubblesWrapper, FetchMoreConversationLoadingWrapper } from \"../conversationStyling\";\nimport ConversationBubble from \"./ConversationBubble/ConversationBubble\";\nimport ChatMessageLoadingSpinner from \"../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport { useEffect, useRef, useCallback, useState } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as customSubscriptions from \"../../../graphql/customSubscriptions\";\nimport { userModelSelector } from \"../../../state/selectors/userModel\";\nimport { useRecoilState } from \"recoil\";\nimport { callApi } from \"../../../utils/api/api\";\nimport Observable from \"zen-observable-ts\";\nimport { ConversationModel } from \"../../../interfaces/models/conversationModel\";\n\ninterface ConversationInboxProps {\n    accessToken: string;\n}\n\nexport default function ConversationInbox({ accessToken }: ConversationInboxProps) {\n    const conversationsContainerRef = useRef<HTMLDivElement | null>(null);\n    const conversationsFetching = useRef(false);\n    const conversationNextToken = useRef<string | null>(null);\n    const [isConversationBottom, setIsConversationBottom] = useState(false);\n    const [conversations, setConversations] = useState<ConversationModel[]>([]);\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n    const [loadingPage, setLoadingPage] = useState(false);\n\n    const sortConversations = (conversations: ConversationModel[]) => {\n        return [...conversations.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())];\n    };\n    const hasConversationOverFlow = () => {\n        return conversationsContainerRef.current?.scrollHeight! > conversationsContainerRef.current?.clientHeight!;\n    };\n\n    const updateGuestConversationsSubscription = useCallback(async (userModelId: string) => {\n        const subscription = API.graphql(\n            graphqlOperation(customSubscriptions.onUpdateConversationByMessageOwnerID, {\n                messageownerID: userModelId,\n            })\n        ) as Observable<any>;\n\n        subscription.subscribe({\n            next: ({ provider, value }) => {\n                setConversations((prevConversations) => {\n                    const updatedConversation = value.data.onUpdateConversationByMessageOwnerID;\n                    const conversationsCopy = prevConversations.map((conversation) => {\n                        if (conversation.id === updatedConversation.id) {\n                            return {\n                                ...conversation,\n                                MessageModels: updatedConversation.MessageModels,\n                                updatedAt: new Date().toISOString(),\n                                status: updatedConversation.status,\n                            };\n                        }\n                        return conversation;\n                    });\n                    return sortConversations(conversationsCopy);\n                });\n            },\n            error: (error) => console.warn(error),\n        });\n    }, []);\n\n    const fetchConversations = useCallback(async () => {\n        await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-user`, `user/guest/conversations`, {\n            headers: {\n                Authorization: accessToken,\n            },\n            body: {\n                nextToken: null,\n            },\n        }).then((res) => {\n            console.log(res);\n            if (res.success) {\n                conversationNextToken.current = res.body.nextToken;\n                setConversations(res.body?.conversations);\n            }\n        });\n    }, [accessToken]);\n\n    const fetchMoreConversations = useCallback(\n        async (nextToken: string) => {\n            conversationsFetching.current = true;\n            await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-user`, `user/guest/conversations`, {\n                headers: {\n                    Authorization: accessToken,\n                },\n                body: {\n                    nextToken: nextToken,\n                },\n            })\n                .then((res) => {\n                    console.log(res);\n                    if (res.success) {\n                        conversationNextToken.current = res.body.nextToken;\n                        setIsConversationBottom(false);\n                        setConversations((prevConversations) => {\n                            return sortConversations([...prevConversations, ...res.body.conversations]);\n                        });\n                        conversationsFetching.current = false;\n                    }\n                })\n                .catch((err) => console.log(err));\n        },\n        [accessToken]\n    );\n\n    const handleConversationScroll = useCallback(() => {\n        // check if the conversation has overflow and if the user is at the bottom of the conversation\n        if (hasConversationOverFlow() && !conversationsFetching.current) {\n            if (conversationNextToken.current === null) {\n                return;\n            }\n            setIsConversationBottom(Math.ceil(conversationsContainerRef.current?.scrollTop!) + conversationsContainerRef.current?.clientHeight! >= conversationsContainerRef.current?.scrollHeight!);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!loadingPage) {\n            const { current } = conversationsContainerRef;\n            current?.addEventListener(\"scroll\", handleConversationScroll);\n\n            return () => {\n                current?.removeEventListener(\"scroll\", handleConversationScroll);\n            };\n        }\n    }, [handleConversationScroll, loadingPage]);\n\n    useEffect(() => {\n        if (isConversationBottom && conversationNextToken.current) {\n            console.log(\"fetch more conversation\");\n            fetchMoreConversations(conversationNextToken.current);\n        }\n    }, [fetchMoreConversations, isConversationBottom]);\n\n    //init\n    useEffect(() => {\n        const init = async () => {\n            setLoadingPage(true);\n            await fetchConversations();\n            await updateGuestConversationsSubscription(userModel!.id);\n            setLoadingPage(false);\n        };\n        init();\n    }, [fetchConversations, updateGuestConversationsSubscription, userModel]);\n\n    return (\n        <RecentConversationsWrapper ref={conversationsContainerRef}>\n            <RecentConversationsTitle>Inbox</RecentConversationsTitle>\n\n            <RecentConversationBubblesWrapper>\n                {conversations.map((conversation) => {\n                    return <ConversationBubble key={conversation.id} conversation={conversation} />;\n                })}\n                {isConversationBottom && (\n                    <FetchMoreConversationLoadingWrapper>\n                        <ChatMessageLoadingSpinner />\n                    </FetchMoreConversationLoadingWrapper>\n                )}\n            </RecentConversationBubblesWrapper>\n        </RecentConversationsWrapper>\n    );\n}\n","import styled from \"styled-components\";\nimport { ColorTheme } from \"../../../../components/globaStyledComponents/globalStyledComponentsStyling\";\nexport const ConversationBookingRequestDesktopWrapperLoadingWrapper = styled.div`\n    grid-row: 1/4;\n    grid-column: 3/4;\n    height: 100%;\n    width: 100%;\n    border-left: 1px solid ${ColorTheme.Grey2.color};\n    padding: 44px 32px;\n    padding-top: 32px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    @media (max-width: 1280px) {\n        display: none;\n    }\n`;\n","import { ConversationBookingRequestDesktopWrapperLoadingWrapper } from \"./ConversationBookingRequestDesktopWrapperLoadingStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\n\nexport default function ConversationBookingRequestDesktopWrapperLoading() {\n    return (\n        <ConversationBookingRequestDesktopWrapperLoadingWrapper>\n            <ChatMessageLoadingSpinner style={{ width: \"50px\", height: \"50px\" }} />\n        </ConversationBookingRequestDesktopWrapperLoadingWrapper>\n    );\n}\n","import {\n    ConversationBookingRequestDesktopWrapper,\n    BookingRequestDetailsButton,\n    BookingRequestDetailsButtonComplete,\n    BookingRequestDetailsWrapperButton,\n    BookingRequestImage,\n    BookingRequestTitle,\n    BookingRequestSubtitle,\n    BookingRequestDatesWrapper,\n    BookingRequestDatesTitle,\n    BookingRequestDatesSubtitle,\n    BookingRequestDatesSubtitleTime,\n    BookingRequestDatesDivider,\n    BookingRequestDetailWrapper,\n    BookingRequestDetailButton,\n    PriceDetailsSubtotalPriceWrapper,\n    PriceDetailsSubtotalPrice,\n    PriceDetailsSubtotalPriceDivider,\n    BookingRequestCommunicationNotice,\n    BookingRequestReportHost,\n    BookingRequestDetailLinkDisabled,\n    BookingRequestDetailLink,\n    InboxSectionDivider,\n    BookingRequestCompleteOrDetailsButtonWrapper,\n    ConversationBookingRequestDesktopHeaderSubtitle,\n    BookingRequestStateWrapper,\n} from \"../conversationStyling\";\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ConversationBookingRequestDesktopWrapperLoading from \"../loading/ConversationBookingRequestDesktopWrapperLoading/ConversationBookingRequestDesktopWrapperLoading\";\nimport { useNavigate } from \"react-router-dom\";\nimport { defaultSearchFilter } from \"../../../utils/defaultSearchQuery/defaultSearchQuery\";\nimport constructOptimisedImageUrl from \"../../../utils/imageOptimisation/constructOptimisedImageUrl\";\nimport { BookingRequestModel } from \"../../../interfaces/models/bookingRequestModel\";\nimport { ListingModel } from \"../../../interfaces/models/listingModel\";\n\ninterface ExtendedBookingRequest extends BookingRequestModel {\n    expired: boolean;\n    ListingModel: ListingModel;\n    checkInTime: number;\n    checkOutTime: number;\n}\n\ninterface BookingGuestData {\n    firstName: string;\n    phone: string;\n}\n\ninterface ListingData {\n    id: string;\n    propertyTitle: string;\n    listingImages: string[];\n    typeOfPlace: string;\n    suburb: string;\n}\n\ninterface listingOwnerData {\n    listingOwnerData: object;\n}\n\ninterface PriceItem {\n    label: string;\n    amountFormatted: string;\n}\n\ninterface guestPriceBreakdown {\n    priceItems: PriceItem[];\n    subTotalItems: PriceItem[];\n}\n\ninterface Props {\n    bookingRequest: ExtendedBookingRequest | null;\n    bookingGuestData?: BookingGuestData | null;\n    listingData: ListingData | null;\n    listingOwnerData: listingOwnerData | null;\n    loadingPage: boolean;\n    guestPriceBreakdown: guestPriceBreakdown | null;\n}\n\nexport default function ConversationBookingDetails({ bookingRequest, listingOwnerData, listingData, guestPriceBreakdown, loadingPage }: Props) {\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const [copied, setCopied] = useState(false);\n    const [changesRequested, setChangesRequested] = useState(false);\n    const [refundRequested, setRefundRequested] = useState(false);\n    const bookingDetailRef = useRef<HTMLDivElement>(null);\n\n    const getPlaceType = (placeType: string) => {\n        switch (placeType) {\n            case \"entire-place\":\n                return \"Entire home\";\n            case \"private-room\":\n                return \"Private room\";\n            case \"shared-room\":\n                return \"Shared room\";\n            default:\n                break;\n        }\n    };\n    const getMonth = (month: number) => {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return months[month];\n    };\n    const getArrivalFullDate = () => {\n        if (bookingRequest!.arrivalDate === null) {\n            return \"-\";\n        }\n        let arrivalDate = new Date(bookingRequest!.arrivalDate.replace(\"Z\", \"\"));\n\n        return `${arrivalDate.getDate()} ${getMonth(arrivalDate.getMonth())} ${arrivalDate.getFullYear()}`;\n    };\n    const getDepartureFullDate = () => {\n        if (bookingRequest!.departureDate === null) {\n            return \"-\";\n        }\n        let departureDate = new Date(bookingRequest!.departureDate.replace(\"Z\", \"\"));\n        return `${departureDate.getDate()} ${getMonth(departureDate.getMonth())} ${departureDate.getFullYear()}`;\n    };\n    const getTime = (time: number) => {\n        if (time < 100 || time > 2400) {\n            return null;\n        }\n        const ampm = time > 1100 && time < 2400 ? \"pm\" : \"am\";\n        const hour = time === 1200 || time === 2400 ? 12 : (time / 100) % 12;\n        return `${hour}:00${ampm}`;\n    };\n    const getBookingRequestState = () => {\n        if (bookingRequest) {\n            if (bookingRequest.declined) {\n                return \"Declined\";\n            }\n            if (bookingRequest.cancelled) {\n                return \"Cancelled\";\n            }\n            if (!bookingRequest.completed) {\n                return \"Enquiry\";\n            }\n            if (bookingRequest.confirmed) {\n                return \"Confirmed\";\n            }\n            if (bookingRequest.expired) {\n                return \"Expired\";\n            } else {\n                return \"Requested\";\n            }\n        }\n    };\n    const getArrivalDate = () => {\n        let arrivalDate = new Date(bookingRequest!.arrivalDate.replace(\"Z\", \"\"));\n\n        return `${arrivalDate.getDate()} ${getMonth(arrivalDate.getMonth())}`;\n    };\n    const getDepartureDate = () => {\n        let departureDate = new Date(bookingRequest!.departureDate.replace(\"Z\", \"\"));\n\n        return `${departureDate.getDate()} ${getMonth(departureDate.getMonth())}`;\n    };\n    const renderChangeBtn = () => {\n        if (changesRequested || refundRequested) {\n            return <BookingRequestDetailLinkDisabled>Change</BookingRequestDetailLinkDisabled>;\n        }\n        if (bookingRequest) {\n            if (!bookingRequest.completed && !bookingRequest.cancelled) {\n                return <BookingRequestDetailLink to={`/complete-booking/${bookingRequest.id}`}>Change</BookingRequestDetailLink>;\n            }\n            if (bookingRequest.confirmed && !bookingRequest.cancelled) {\n                return <BookingRequestDetailLink to={`/change-your-booking/${bookingRequest.id}`}>Change</BookingRequestDetailLink>;\n            }\n        }\n        return <BookingRequestDetailLinkDisabled>Change</BookingRequestDetailLinkDisabled>;\n    };\n    const getCancellationPolicy = () => {\n        if (bookingRequest) {\n            let arrivalDate = new Date(bookingRequest.arrivalDate);\n            let flexibleDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 1);\n            let moderateDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 14);\n            let strictDate = arrivalDate.setUTCDate(arrivalDate.getUTCDate() - 28);\n\n            if (bookingRequest.cancellationPolicy === \"flexible\") {\n                return (\n                    <div>\n                        <strong>Free cancellation before {`${new Date(flexibleDate).getUTCDate()} ${getMonth(new Date(flexibleDate).getMonth())}`}.</strong> After that, you will receive a full refund\n                        of unspent nights minus service fee and cleaning fee if applicable.\n                    </div>\n                );\n            } else if (bookingRequest.cancellationPolicy === \"moderate\") {\n                return (\n                    <div>\n                        <strong>Free cancellation before {`${new Date(moderateDate).getUTCDate()} ${getMonth(new Date(moderateDate).getMonth())}`}.</strong> After that, you will receive a full refund\n                        of unspent nights minus service fee and cleaning fee if applicable.\n                    </div>\n                );\n            } else if (bookingRequest.cancellationPolicy === \"strict\") {\n                return (\n                    <div>\n                        <strong>Free cancellation before {`${new Date(strictDate).getUTCDate()} ${getMonth(new Date(strictDate).getMonth())}`}.</strong> After that, if your guest cancel less than 2\n                        weeks to arrival, they will be charged for the first week.\n                    </div>\n                );\n            }\n        }\n    };\n    const checkChangesRequested = useCallback(async () => {\n        let changesRequested = false;\n\n        if (bookingRequest) {\n            if (bookingRequest.ChangeBookingRequestModel.items.length > 0) {\n                bookingRequest.ChangeBookingRequestModel.items.map((item, index) => {\n                    if (!item.completed) {\n                        changesRequested = true;\n                    }\n                    return null;\n                });\n            }\n        }\n\n        if (changesRequested) {\n            setChangesRequested(true);\n        }\n    }, [bookingRequest]);\n\n    const checkRefundRequested = useCallback(async () => {\n        let refundRequested = false;\n\n        if (bookingRequest) {\n            if (bookingRequest.RefundRequestModel.items.length > 0) {\n                bookingRequest.RefundRequestModel.items.map((item, index) => {\n                    if (!item.completed) {\n                        refundRequested = true;\n                    }\n                    return null;\n                });\n            }\n        }\n\n        if (refundRequested) {\n            setRefundRequested(true);\n        }\n    }, [bookingRequest]);\n\n    useEffect(() => {\n        bookingDetailRef.current?.scrollTo({ top: 0 });\n        checkChangesRequested();\n        checkRefundRequested();\n    }, [checkChangesRequested, checkRefundRequested, id]);\n\n    if (loadingPage) return <ConversationBookingRequestDesktopWrapperLoading />;\n    if (!bookingRequest || !listingOwnerData || !listingData || !guestPriceBreakdown) return <ConversationBookingRequestDesktopWrapper />;\n    return (\n        <ConversationBookingRequestDesktopWrapper ref={bookingDetailRef}>\n            <BookingRequestStateWrapper>\n                <ConversationBookingRequestDesktopHeaderSubtitle>{getBookingRequestState()}</ConversationBookingRequestDesktopHeaderSubtitle>\n            </BookingRequestStateWrapper>\n            <BookingRequestDetailsWrapperButton type=\"button\" onClick={() => navigate(`/listing/${bookingRequest.listingmodelID}`)}>\n                <BookingRequestImage src={constructOptimisedImageUrl(JSON.parse(listingData.listingImages[0]).key, 800)} alt=\"\" />\n            </BookingRequestDetailsWrapperButton>\n            <BookingRequestTitle>{listingData.propertyTitle}</BookingRequestTitle>\n            <BookingRequestSubtitle>\n                {getPlaceType(listingData.typeOfPlace)} in {listingData.suburb}\n            </BookingRequestSubtitle>\n            <BookingRequestCompleteOrDetailsButtonWrapper>\n                {bookingRequest.completed ? (\n                    <BookingRequestDetailsButton to={`/your-booking/${bookingRequest.id}`}>Details</BookingRequestDetailsButton>\n                ) : (\n                    <BookingRequestDetailsButtonComplete to={`/complete-booking/${bookingRequest.id}`}>Complete booking</BookingRequestDetailsButtonComplete>\n                )}\n            </BookingRequestCompleteOrDetailsButtonWrapper>\n\n            <BookingRequestDatesWrapper>\n                <div style={{ gridColumn: \"1/2\", gridRow: \"1/2\", display: \"flex\", flexDirection: \"column\" }}>\n                    <BookingRequestDatesTitle>Arrive</BookingRequestDatesTitle>\n                    <BookingRequestDatesSubtitle>{getArrivalFullDate()}</BookingRequestDatesSubtitle>\n                    <BookingRequestDatesSubtitleTime>{bookingRequest.checkInTime > 0 ? getTime(bookingRequest.checkInTime) : \"3:00 pm\"}</BookingRequestDatesSubtitleTime>\n                </div>\n                <BookingRequestDatesDivider />\n                <div style={{ gridColumn: \"2/3\", display: \"flex\", flexDirection: \"column\", paddingLeft: \"32px\" }}>\n                    <BookingRequestDatesTitle>Depart</BookingRequestDatesTitle>\n                    <BookingRequestDatesSubtitle>{getDepartureFullDate()}</BookingRequestDatesSubtitle>\n                    <BookingRequestDatesSubtitleTime>{bookingRequest.checkOutTime > 0 ? getTime(bookingRequest.checkOutTime) : \"11:00 am\"}</BookingRequestDatesSubtitleTime>\n                </div>\n            </BookingRequestDatesWrapper>\n\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <BookingRequestDetailWrapper>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <BookingRequestDatesTitle>Dates</BookingRequestDatesTitle>\n                        <BookingRequestDatesSubtitle>\n                            {getArrivalDate()} - {getDepartureDate()}\n                        </BookingRequestDatesSubtitle>\n                    </div>\n                    {renderChangeBtn()}\n                </BookingRequestDetailWrapper>\n            )}\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <BookingRequestDetailWrapper>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <BookingRequestDatesTitle>Guests</BookingRequestDatesTitle>\n                        <BookingRequestDatesSubtitle>{bookingRequest.guests}</BookingRequestDatesSubtitle>\n                    </div>\n                    {renderChangeBtn()}\n                </BookingRequestDetailWrapper>\n            )}\n            {getBookingRequestState() !== \"Enquiry\" && bookingRequest.completed && (\n                <BookingRequestDetailWrapper style={{ border: \"none\" }}>\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <BookingRequestDatesTitle>Booking ref.</BookingRequestDatesTitle>\n                        <BookingRequestDatesSubtitle>{bookingRequest.confirmationCode}</BookingRequestDatesSubtitle>\n                    </div>\n                    <BookingRequestDetailButton\n                        type=\"button\"\n                        onClick={() => {\n                            setCopied(true);\n                            navigator.clipboard.writeText(bookingRequest ? bookingRequest.confirmationCode : \"\");\n                        }}\n                    >\n                        {copied ? \"Copied!\" : \"Copy\"}\n                    </BookingRequestDetailButton>\n                </BookingRequestDetailWrapper>\n            )}\n            {getBookingRequestState() !== \"Enquiry\" && (\n                <>\n                    <InboxSectionDivider />\n                    <BookingRequestDetailWrapper style={{ border: \"none\" }}>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n                            <BookingRequestDatesTitle style={{ fontSize: \"22px\", lineHeight: \"26px\", marginTop: \"8px\", marginBottom: \"24px\" }}>Price details</BookingRequestDatesTitle>\n\n                            {guestPriceBreakdown.priceItems\n                                .filter((item) => item.label !== \"Deposit\")\n                                .map((priceItem) => {\n                                    return (\n                                        <PriceDetailsSubtotalPriceWrapper key={priceItem.label}>\n                                            <PriceDetailsSubtotalPrice>{priceItem.label}</PriceDetailsSubtotalPrice>\n                                            <PriceDetailsSubtotalPrice>{priceItem.amountFormatted}</PriceDetailsSubtotalPrice>\n                                        </PriceDetailsSubtotalPriceWrapper>\n                                    );\n                                })}\n                            {guestPriceBreakdown.subTotalItems.map((priceItem, index) => {\n                                return (\n                                    <PriceDetailsSubtotalPriceWrapper key={priceItem.label}>\n                                        <PriceDetailsSubtotalPrice style={{ fontWeight: index === 0 ? \"600\" : \"400\" }}>{priceItem.label}</PriceDetailsSubtotalPrice>\n                                        <PriceDetailsSubtotalPrice style={{ fontWeight: index === 0 ? \"600\" : \"400\" }}>{priceItem.amountFormatted}</PriceDetailsSubtotalPrice>\n                                    </PriceDetailsSubtotalPriceWrapper>\n                                );\n                            })}\n                        </div>\n                    </BookingRequestDetailWrapper>\n                    <InboxSectionDivider />\n                </>\n            )}\n             <BookingRequestDatesTitle style={{ fontSize: \"22px\", lineHeight: \"26px\", marginTop: \"32px\", marginBottom: \"24px\" }}>Guest policy</BookingRequestDatesTitle>\n            <BookingRequestCommunicationNotice>\n                {getCancellationPolicy()}\n                {bookingRequest.deposit > 0 ? (\n                    <div style={{ marginTop: \"24px\" }}>\n                        <strong>Your host may charge a ${Number(bookingRequest.deposit / 100)} AUD deposit. </strong> This is usually processed at check-in, your host will provide more information.\n                    </div>\n                ) : (\n                    <div style={{ marginTop: \"24px\" }}>\n                        <strong>No deposit. </strong> You don't have to pay a deposit. However, you may still be liable for damages. Your host will provide more information.\n                    </div>\n                )}\n            </BookingRequestCommunicationNotice>\n\n            <BookingRequestCommunicationNotice>\n                <strong>Always communicate through Anystay.</strong> To protect your payment, never transfer money or communicate outside of the Anystay website or app.\n            </BookingRequestCommunicationNotice>\n\n            <BookingRequestReportHost onClick={() => (window as any).Intercom(\"showNewMessage\", \"\")}>Report host</BookingRequestReportHost>\n        </ConversationBookingRequestDesktopWrapper>\n    );\n}\n","import { ConversationChatBubbleProfilePicture, ReceivedMessageWrapper, MessageWrapper } from \"../../conversationStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport { useState, useEffect } from \"react\";\nimport { userModelSelector } from \"../../../../state/selectors/userModel\";\nimport { useRecoilState } from \"recoil\";\n\ninterface MessageProps {\n    loading?: boolean;\n    message: {\n        author: string;\n        body: string;\n    };\n    listingOwnerProfilePictureURL: string;\n    prevMessage?: {\n        author: string;\n    };\n}\n\nexport default function Message({ loading, message, listingOwnerProfilePictureURL, prevMessage }: MessageProps) {\n    const [msgLoading, setMsgLoading] = useState(false);\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n    const isSameAuthor = prevMessage?.author === message.author;\n\n    //show spinner if message is not sent after 2 seconds\n    useEffect(() => {\n        let loadingTimer: NodeJS.Timeout | null = null;\n        if (loading) {\n            loadingTimer = setTimeout(() => {\n                setMsgLoading(true);\n            }, 2000);\n        } else {\n            setMsgLoading(false);\n        }\n        return () => {\n            if (loadingTimer) clearTimeout(loadingTimer);\n        };\n    }, [loading]);\n\n    if (message.author !== userModel!.id) {\n        return (\n            <div\n                style={\n                    isSameAuthor ? { display: \"flex\", alignItems: \"flex-start\", gap: \"8px\", width: \"70%\" } : { display: \"flex\", alignItems: \"flex-start\", gap: \"8px\", width: \"70%\", marginTop: \"20px\" }\n                }\n            >\n                <ConversationChatBubbleProfilePicture src={listingOwnerProfilePictureURL} />\n                <ReceivedMessageWrapper>{message.body}</ReceivedMessageWrapper>\n            </div>\n        );\n    } else {\n        return (\n            <div style={{ display: \"flex\", width: \"70%\", marginLeft: \"auto\" }}>\n                <div style={{ marginLeft: \"auto\", display: \"flex\", alignItems: \"center\", gap: \"16px\" }}>\n                    <ChatMessageLoadingSpinner style={{ visibility: msgLoading ? \"visible\" : \"hidden\" }} />\n                    <MessageWrapper isSameAuthor={isSameAuthor}>{message.body}</MessageWrapper>\n                </div>\n            </div>\n        );\n    }\n}\n","import { useState } from \"react\";\nimport { ConversationMessageInputWrapper, ConversationMessagesInput, ConversationMessagesInputSendButton, SendButtonImg } from \"../../../conversationStyling\";\nimport { userModelSelector } from \"../../../../../state/selectors/userModel\";\nimport { useRecoilState } from \"recoil\";\nimport { callApi } from \"../../../../../utils/api/api\";\nimport { UserModel } from \"../../../../../interfaces/models/userModel\";\n\ninterface MessageInputProps {\n    conversationmodelID: string;\n    accessToken: string;\n    addMessage: (message: any) => Promise<void>;\n    scrollToBottomConversation: () => void;\n}\n\nexport default function MessageInput({ conversationmodelID, accessToken, addMessage, scrollToBottomConversation }: MessageInputProps) {\n    const [message, setMessage] = useState(\"\");\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n    const [numberOfMessageSend, setNumberOfMessageSend] = useState(0);\n    const makeid = (length: number): string => {\n        var result = \"\";\n        var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    };\n    const createMessage = async () => {\n        setMessage(\"\");\n        setNumberOfMessageSend((prevState) => prevState + 1);\n        if (message.trim().length > 0) {\n            if (numberOfMessageSend < 5) {\n                const tempId = makeid(10);\n                await addMessage({\n                    author: userModel!.id,\n                    body: message.trim(),\n                    conversationmodelID: conversationmodelID,\n                    createdAt: new Date().toISOString(),\n                    updatedAt: new Date().toISOString(),\n                    isNote: null,\n                    guestNoteBody: null,\n                    hostNoteBody: null,\n                    id: null,\n                    loading: true,\n                    tempId: tempId,\n                });\n                scrollToBottomConversation();\n                await callApi(\"put\", `${process.env.REACT_APP_ENV}-anystay-booking`, \"conversation/guest/message\", {\n                    headers: {\n                        Authorization: accessToken,\n                        conversationID: conversationmodelID,\n                    },\n                    body: {\n                        author: userModel!.id,\n                        body: message.trim(),\n                        conversationModelId: conversationmodelID,\n                        tempId: tempId,\n                    },\n                })\n                    .then((res) => {\n                        setNumberOfMessageSend((prevState) => prevState - 1);\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                    });\n            } else {\n                alert(\"Sending too quickly!\");\n            }\n        }\n    };\n\n    return (\n        <ConversationMessageInputWrapper>\n            <ConversationMessagesInput\n                type=\"text\"\n                placeholder=\"Type your message\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={(e) => (e.key === \"Enter\" ? createMessage() : null)}\n            />\n            <ConversationMessagesInputSendButton type=\"button\" onClick={() => createMessage()}>\n                <SendButtonImg src={\"https://d292awxalydr86.cloudfront.net/Inbox/Send.svg\"} alt={\"Send button\"} />\n            </ConversationMessagesInputSendButton>\n        </ConversationMessageInputWrapper>\n    );\n}\n","import {\n    ConversationMessageInputContentWrapper,\n    BookingRequestButtonWrapper,\n    BookingRequestDetailsButton,\n    BookingRequestDetailsButtonComplete,\n    // BookingRequestDetailsBtnComplete,\n} from \"../../conversationStyling\";\nimport MessageInput from \"./MessageInput/MessageInput\";\nimport { BookingRequestModel } from \"../../../../interfaces/models/bookingRequestModel\";\nimport { ConversationModel } from \"../../../../interfaces/models/conversationModel\";\nimport { ListingModel } from \"../../../../interfaces/models/listingModel\";\n\ninterface MessageInputComponentProps {\n    accessToken: string;\n    addMessage: (message: any) => Promise<void>;\n    scrollToBottomConversation: () => void;\n    conversation: ConversationModel | null;\n    bookingRequest: BookingRequestProps;\n}\n\ninterface BookingRequestProps extends BookingRequestModel {\n    ListingModel: ListingModel;\n}\n\nexport default function MessageInputComponent({ accessToken, conversation, addMessage, scrollToBottomConversation, bookingRequest }: MessageInputComponentProps) {\n    const currentDate = new Date();\n    const arrivalDate = new Date(bookingRequest?.arrivalDate);\n    // const departureDate = new Date(bookingRequest.departureDate);\n\n    // const id = bookingRequest.ListingModel.id;\n    // const [addDatesPopup, setAddDatesPopup] = useState(false);\n    // const [listing, setListing] = useState(null);\n    // const [dates, setDates] = useState({\n    //     startDate: arrivalDate,\n    //     endDate: departureDate,\n    // });\n\n    // const updateDates = async (date) => {\n    //     setDates({ startDate: date[0], endDate: date[1] });\n    //     await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation/${id}`, {\n    //         headers: {\n    //             Authorization: accessToken,\n    //             conversationID: id,\n    //         },\n    //     })\n    //         .then((res) => {})\n    //         .catch((err) => console.log(err));\n    // };\n    // };\n\n    // const initListing = useCallback(\n    //     async (id, dates) => {\n    //         try {\n    //             let listingData = await callApi(\"get\", `${process.env.REACT_APP_ENV}-anystay-listing`, `listing/${id}`, {\n    //                 headers: {\n    //                     Authorization: accessToken,\n    //                 },\n    //             });\n    //             console.log(\"listingData\", listingData);\n    //             setListing(listingData.body.listing);\n    //         } catch (err) {\n    //             console.log(err);\n    //         }\n    //     },\n    //     [accessToken]\n    // );\n\n    // useEffect(() => {\n    //     const init = async () => {\n    //         await initListing(id, dates);\n    //     };\n    //     init();\n    // }, [dates, id, initListing]);\n    // useEffect(() => {\n    //     if (addDatesPopup) {\n    //         document.body.style.overflow = \"hidden\";\n    //     } else {\n    //         document.body.style.overflow = \"unset\";\n    //     }\n    // }, [addDatesPopup]);\n\n    return (\n        <ConversationMessageInputContentWrapper>\n            <MessageInput accessToken={accessToken} conversationmodelID={conversation!.id} addMessage={addMessage} scrollToBottomConversation={scrollToBottomConversation} />\n            {bookingRequest &&\n                (bookingRequest.completed ? (\n                    <BookingRequestButtonWrapper>\n                        <BookingRequestDetailsButton to={`/your-booking/${bookingRequest.id}`}>Details</BookingRequestDetailsButton>\n                    </BookingRequestButtonWrapper>\n                ) : currentDate > arrivalDate ? (\n                    <BookingRequestButtonWrapper>\n                        {/* <BookingRequestDetailsBtnComplete\n                            onClick={() => {\n                                setAddDatesPopup(true);\n                            }}\n                        >\n                            Change date\n                        </BookingRequestDetailsBtnComplete> */}\n                    </BookingRequestButtonWrapper>\n                ) : (\n                    <BookingRequestButtonWrapper>\n                        <BookingRequestDetailsButtonComplete to={`/complete-booking/${bookingRequest.id}`}>Complete booking</BookingRequestDetailsButtonComplete>\n                    </BookingRequestButtonWrapper>\n                ))}\n\n            {/* {addDatesPopup && (\n                <DatesPicker\n                    // unavailableDates={unavailableDates}\n                    startDate={dates.startDate}\n                    endDate={dates.endDate}\n                    listing={listing}\n                    cancelFunc={() => {\n                        setAddDatesPopup(!addDatesPopup);\n                    }}\n                    saveFunc={async (dateRange) => {\n                        await updateDates(dateRange);\n                    }}\n                    handleClickOutside={() => {\n                        setAddDatesPopup(!addDatesPopup);\n                    }}\n                />\n            )} */}\n        </ConversationMessageInputContentWrapper>\n    );\n}\n","import styled from \"styled-components\";\nexport const ConversationMessagesContainerLoadingWrapper = styled.div`\n    grid-row: 3/4;\n    grid-column: 1/2;\n    width: 100%;\n    max-height: calc(100% - 162px);\n    overflow-y: scroll !important;\n    padding: 0 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    // padding-bottom: 132px;\n    @media (min-width: 768px) {\n        grid-column: 2/3;\n        max-height: calc(100% - 110px);\n    }\n`;\n","import { ConversationMessagesContainerLoadingWrapper } from \"./ConversationMessagesContainerLoadingStyling\";\nimport ChatMessageLoadingSpinner from \"../../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nexport default function ConversationMessagesContainerLoading() {\n    return (\n        <ConversationMessagesContainerLoadingWrapper>\n            <ChatMessageLoadingSpinner style={{ width: \"50px\", height: \"50px\" }} />\n        </ConversationMessagesContainerLoadingWrapper>\n    );\n}\n","import {\n    ConversationMessagesContainer,\n    FetchMoreMessagesLoadingWrapper,\n    ConversationCreatedDate,\n    ConversationCreatedBubble,\n    ConversationNoMessagesYetTitle,\n    ConversationNoMessagesYetSubtitle,\n} from \"../conversationStyling\";\nimport ChatMessageLoadingSpinner from \"../../../components/spinner/chatMessageLoadingSpinner/ChatMessageLoadingSpinner\";\nimport Message from \"./Message/Message\";\nimport MessageInputComponent from \"./MessageInputComponent/MessageInputComponent\";\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useParams } from \"react-router-dom\";\nimport { userModelSelector } from \"../../../state/selectors/userModel\";\nimport { useRecoilState } from \"recoil\";\nimport * as customSubscriptions from \"../../../graphql/customSubscriptions\";\nimport ConversationMessagesContainerLoading from \"../loading/ConversationMessagesContainerLoading/ConversationMessagesContainerLoading\";\nimport { callApi } from \"../../../utils/api/api\";\nimport Observable from \"zen-observable-ts\";\nimport { ConversationModel } from \"../../../interfaces/models/conversationModel\";\n\ninterface ConversationChatBoxProps {\n    accessToken: string;\n    listingOwnerProfilePictureURL: string;\n}\n\ninterface MessageProps {\n    id: string | null;\n    tempId: string;\n    author: string;\n    body: string;\n    conversationmodelID: string;\n    createdAt: string;\n    updatedAt: string;\n    isNote: boolean | null;\n    guestNoteBody: string | null;\n    hostNoteBody: string | null;\n    loading: boolean;\n}\n\ninterface MessageModelsItem {\n    createdAt: string;\n}\n\nexport default function ConversationChatBox({ accessToken, listingOwnerProfilePictureURL }: ConversationChatBoxProps) {\n    const [loadingPage, setLoadingPage] = useState(true);\n    const [messages, setMessages] = useState<MessageProps[]>([]);\n    const conversationMessageContainerRef = useRef<HTMLDivElement>(null);\n    const nextToken = useRef<string | null>(null);\n    const currentScrollPos = useRef<number>(0);\n    const messageFetching = useRef(false);\n    const [isTop, setIsTop] = useState(false);\n    const [conversation, setConversation] = useState<ConversationModel | null>(null);\n    const [bookingRequest, setBookingRequest] = useState<any>(null);\n    const [listingOwnerData, setListingOwnerData] = useState<any>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const previousIdRef = useRef<string | null>(null);\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n\n    const scrollToBottomConversation = () => {\n        conversationMessageContainerRef.current?.scrollTo({ top: conversationMessageContainerRef.current?.scrollHeight });\n    };\n    const addMessage = async (message: MessageProps) => {\n        setMessages([...messages, message]);\n    };\n    const hasMessagesOverFlow = () => {\n        return conversationMessageContainerRef.current?.scrollHeight! > conversationMessageContainerRef.current?.clientHeight!;\n    };\n\n    const keepScrollPositionAfterFetchMore = () => {\n        conversationMessageContainerRef.current?.scrollTo({ top: conversationMessageContainerRef.current?.scrollHeight - currentScrollPos.current });\n    };\n    const handleMessagesScroll = useCallback(() => {\n        if (hasMessagesOverFlow() && !messageFetching.current) {\n            if (nextToken.current === null) {\n                return;\n            }\n            if (conversationMessageContainerRef.current?.scrollHeight) {\n                currentScrollPos.current = conversationMessageContainerRef.current?.scrollHeight;\n            }\n            setIsTop(conversationMessageContainerRef.current?.scrollTop === 0);\n        }\n    }, []);\n\n    const refreshMessages = useCallback((fetchedMessages: MessageProps[], messages: MessageProps[]) => {\n        let newMessages = [...messages];\n        let newMessagesToAdd = [];\n        for (let i = 0; i < fetchedMessages.length; i++) {\n            let toAdd = true;\n            for (let j = 0; j < messages.length; j++) {\n                // if the message is loading and the message is already in the state, remove the loading state\n                if (fetchedMessages[i].tempId === messages[j].tempId && messages[j].loading) {\n                    newMessages[j] = fetchedMessages[i];\n                }\n                // if new msg and the msg in the state have same id, that means the msg is already received, so don't add it\n                // if new msg and the msg in the state have same tempid, that means the msg sent by me is already received, so don't add it\n                if (fetchedMessages[i].id === messages[j].id || fetchedMessages[i].tempId === messages[j].tempId) {\n                    toAdd = false;\n                }\n            }\n            if (toAdd) {\n                newMessagesToAdd.push(fetchedMessages[i]);\n            }\n        }\n        return newMessages.concat(newMessagesToAdd);\n    }, []);\n\n    const fetchMoreMessages = useCallback(\n        async (token: string) => {\n            messageFetching.current = true;\n            await callApi(\"post\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation`, {\n                headers: {\n                    Authorization: accessToken,\n                    conversationID: conversation!.id,\n                },\n                body: {\n                    conversationId: conversation!.id,\n                    nextToken: token,\n                },\n            })\n                .then((res) => {\n                    console.log(res);\n                    if (res.success) {\n                        nextToken.current = res.body.nextToken;\n                        setIsTop(false);\n                        setMessages((prevMsg) => {\n                            return [\n                                ...res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()),\n                                prevMsg,\n                            ];\n                        });\n                        keepScrollPositionAfterFetchMore();\n                        messageFetching.current = false;\n                    }\n                })\n                .catch((err) => console.log(err));\n        },\n        [conversation, accessToken]\n    );\n\n    const getConversation = useCallback(\n        async (pageChange = false) => {\n            //50 is the threshold for the scroll to bottom\n            let conversationMessageScrollWhenReceive =\n                Math.floor(conversationMessageContainerRef.current?.scrollTop!) + conversationMessageContainerRef.current?.clientHeight! >=\n                    conversationMessageContainerRef.current?.scrollHeight! - 50 ||\n                (!conversationMessageContainerRef.current?.scrollTop && !conversationMessageContainerRef.current?.scrollHeight && !conversationMessageContainerRef.current?.clientHeight);\n            if (id !== \"null\" && id) {\n                await callApi(\"get\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation/${id}`, {\n                    headers: {\n                        Authorization: accessToken,\n                        conversationId: id,\n                    },\n                }).then(async (res) => {\n                    console.log(\"message\", res);\n\n                    nextToken.current = res.body.nextToken;\n                    setBookingRequest(res.body.conversation.BookingRequestModel);\n                    setListingOwnerData(res.body.conversation.UserHostModel.UserModel);\n                    setConversation(res.body.conversation);\n                    setMessages((prevMsg) => {\n                        const messages = pageChange\n                            ? res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n                            : refreshMessages(\n                                  res.body.conversation.MessageModels.items.sort((a: MessageModelsItem, b: MessageModelsItem) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()),\n                                  prevMsg\n                              );\n                        if (messages.length > 0 && messages[messages.length - 1].author !== userModel!.id) {\n                            if (conversationMessageScrollWhenReceive) {\n                                scrollToBottomConversation();\n                            }\n                        }\n                        return messages;\n                    });\n                });\n            }\n        },\n        [id, accessToken, refreshMessages, userModel]\n    );\n\n    const initConversationSubscription = useCallback(() => {\n        const subscription = API.graphql(\n            graphqlOperation(customSubscriptions.onMessageByConversationModelID, {\n                conversationmodelID: id,\n            })\n        ) as Observable<any>;\n\n        subscription.subscribe({\n            next: async ({ provider, value }) => {\n                await getConversation();\n            },\n            error: (error: any) => console.log(error),\n        });\n    }, [getConversation, id]);\n\n    useEffect(() => {\n        //init on load and when id changes\n        const init = async () => {\n            setLoadingPage(true);\n            if (userModel) {\n                initConversationSubscription();\n                await getConversation(id !== previousIdRef.current);\n            }\n            if (id) {\n                previousIdRef.current = id;\n            }\n            setLoadingPage(false);\n        };\n\n        init();\n    }, [getConversation, initConversationSubscription, userModel, id]);\n\n    useEffect(() => {\n        if (!loadingPage) {\n            const { current } = conversationMessageContainerRef;\n            scrollToBottomConversation();\n            current?.addEventListener(\"scroll\", handleMessagesScroll);\n            return () => {\n                current?.removeEventListener(\"scroll\", handleMessagesScroll);\n            };\n        }\n    }, [handleMessagesScroll, loadingPage]);\n\n    useEffect(() => {\n        if (isTop && nextToken.current) {\n            fetchMoreMessages(nextToken.current);\n        }\n    }, [fetchMoreMessages, isTop]);\n\n    if (loadingPage) {\n        return <ConversationMessagesContainerLoading />;\n    }\n    if (messages.length === 0) {\n        return (\n            <ConversationMessagesContainer>\n                <ConversationNoMessagesYetTitle>No messages yet</ConversationNoMessagesYetTitle>\n                <ConversationNoMessagesYetSubtitle>All of your messages will appear here</ConversationNoMessagesYetSubtitle>\n            </ConversationMessagesContainer>\n        );\n    }\n\n    return (\n        <>\n            <ConversationMessagesContainer ref={conversationMessageContainerRef}>\n                {isTop && (\n                    <FetchMoreMessagesLoadingWrapper>\n                        <ChatMessageLoadingSpinner />\n                    </FetchMoreMessagesLoadingWrapper>\n                )}\n                {conversation && (\n                    <ConversationCreatedDate style={{ marginTop: \"0px\" }}>{`${new Date(conversation.updatedAt).toLocaleDateString(\"au\", {\n                        day: \"numeric\",\n                        month: \"short\",\n                        year: \"numeric\",\n                    })}, ${new Date(conversation.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                )}\n                {conversation &&\n                    listingOwnerData &&\n                    messages.map((message, index) => {\n                        const prevMessage = index > 0 ? messages[index - 1] : undefined;\n                        if (index === 0) {\n                            if (message.isNote) {\n                                return <ConversationCreatedBubble key={index}>{message.guestNoteBody}</ConversationCreatedBubble>;\n                            } else {\n                                return message.body ? <Message key={index} listingOwnerProfilePictureURL={listingOwnerProfilePictureURL} message={message} prevMessage={prevMessage} /> : null;\n                            }\n                        }\n                        const messageDate = new Date(message.createdAt);\n                        const previousMessage = new Date(messages[index - 1].createdAt);\n                        const oneHour = 1000 * 60 * 60;\n                        const timeDiff = (messageDate.getTime() - previousMessage.getTime()) / oneHour;\n                        if (message.isNote) {\n                            if (timeDiff >= 1) {\n                                if (messageDate.getDate() !== previousMessage.getDate()) {\n                                    return (\n                                        <div key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleDateString(\"au\", { day: \"numeric\", month: \"short\", year: \"numeric\" })}, ${new Date(\n                                                message.createdAt\n                                            ).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <ConversationCreatedBubble>{message.guestNoteBody}</ConversationCreatedBubble>\n                                        </div>\n                                    );\n                                } else {\n                                    return (\n                                        <div key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <ConversationCreatedBubble>{message.guestNoteBody}</ConversationCreatedBubble>\n                                        </div>\n                                    );\n                                }\n                            } else {\n                                return <ConversationCreatedBubble key={index}>{message.guestNoteBody}</ConversationCreatedBubble>;\n                            }\n                        } else {\n                            if (!message.body) {\n                                return null;\n                            }\n                            if (timeDiff >= 1) {\n                                if (messageDate.getDate() !== previousMessage.getDate()) {\n                                    return (\n                                        <div key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleDateString(\"au\", { day: \"numeric\", month: \"short\", year: \"numeric\" })}, ${new Date(\n                                                message.createdAt\n                                            ).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <Message loading={message.loading} listingOwnerProfilePictureURL={listingOwnerProfilePictureURL} message={message} prevMessage={prevMessage} />\n                                        </div>\n                                    );\n                                } else {\n                                    return (\n                                        <div key={index}>\n                                            <ConversationCreatedDate>{`${new Date(message.createdAt).toLocaleTimeString(\"en-AU\", { hour: \"2-digit\", minute: \"2-digit\" })}`}</ConversationCreatedDate>\n                                            <Message loading={message.loading} listingOwnerProfilePictureURL={listingOwnerProfilePictureURL} message={message} prevMessage={prevMessage} />\n                                        </div>\n                                    );\n                                }\n                            } else {\n                                return <Message loading={message.loading} key={index} listingOwnerProfilePictureURL={listingOwnerProfilePictureURL} message={message} prevMessage={prevMessage} />;\n                            }\n                        }\n                    })}\n            </ConversationMessagesContainer>\n            <MessageInputComponent\n                accessToken={accessToken}\n                conversation={conversation}\n                addMessage={addMessage}\n                scrollToBottomConversation={scrollToBottomConversation}\n                bookingRequest={bookingRequest}\n            />\n        </>\n    );\n}\n","import { useEffect, useCallback, useState } from \"react\";\nimport { ConversationWrapper } from \"./conversationStyling\";\nimport TopNavHeader from \"./mobileComponent/TopNavHeader\";\nimport ChatBoxTopHeader from \"./desktopComponent/ChatBoxTopHeader\";\nimport TopBookingInfo from \"./mobileComponent/TopBookingInfo\";\nimport ConversationInbox from \"./ConversationInbox/ConversationInbox\";\nimport ConversationBookingDetails from \"./ConversationBookingDetails/ConversationBookingDetails\";\nimport ConversationChatBox from \"./ConversationChatBox/ConversationChatBox\";\nimport { userModelSelector } from \"../../state/selectors/userModel\";\nimport { accessTokenSelector } from \"../../state/selectors/accessToken\";\nimport { useRecoilState } from \"recoil\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { callApi } from \"../../utils/api/api\";\nimport HelmetTags from \"../../components/Helmet/HelmetTags\";\nimport constructOptimisedProtectedImageUrl from \"../../utils/imageOptimisation/constructOptimisedProtectedImageUrl\";\n\nexport default function Conversations() {\n    const { id } = useParams();\n    const [userModel, setUserModel] = useRecoilState(userModelSelector);\n    const [accessToken, setAccessToken] = useRecoilState(accessTokenSelector);\n    const navigate = useNavigate();\n\n    const [loadingPage, setLoadingPage] = useState(true);\n    const [conversation, setConversation] = useState(null);\n    const [bookingRequest, setBookingRequest] = useState(null);\n    const [listingData, setListingData] = useState(null);\n    const [listingOwnerData, setListingOwnerData] = useState(null);\n    const [listingOwnerProfilePictureURL, setListingOwnerProfilePictureURL] = useState(\"https://d292awxalydr86.cloudfront.net/Settings+page/Profile+photo+placeholder.png\");\n    const [guestPriceBreakdown, setGuestPriceBreakdown] = useState(null);\n\n    // Fetch the conversation and update the state\n    const getConversation = useCallback(async () => {\n        //50 is the threshold for the scroll to bottom\n        if (id !== \"null\" && id) {\n            await callApi(\"get\", `${process.env.REACT_APP_ENV}-anystay-booking`, `conversation/${id}`, {\n                headers: {\n                    Authorization: accessToken,\n                    conversationId: id,\n                },\n            }).then(async (res) => {\n                console.log(res);\n                if (res.body.conversation.UserHostModel.UserModel.profilePicture) {\n                    const listingOwnerProfilePic = constructOptimisedProtectedImageUrl(\n                        res.body.conversation.UserHostModel.UserModel.profilePicture,\n                        res.body.conversation.UserHostModel.UserModel.identityID,\n                        100\n                    );\n                    setListingOwnerProfilePictureURL(listingOwnerProfilePic);\n                }\n                setConversation(res.body?.conversation);\n                setBookingRequest(res.body?.conversation?.BookingRequestModel);\n                setListingData(res.body?.conversation?.BookingRequestModel?.ListingModel);\n                setListingOwnerData(res.body?.conversation?.UserHostModel?.UserModel);\n                if (res.body?.conversation?.BookingRequestModel?.guestPriceBreakdown) {\n                    setGuestPriceBreakdown(JSON.parse(res.body?.conversation?.BookingRequestModel?.guestPriceBreakdown));\n                }\n            });\n        }\n    }, [id, accessToken]);\n    useEffect(() => {\n        const init = async () => {\n            setLoadingPage(true);\n            await getConversation();\n            setLoadingPage(false);\n        };\n        if (userModel) {\n            init();\n        } else {\n            navigate(\"/\");\n        }\n    }, [getConversation, navigate, userModel]);\n\n    return (\n        <ConversationWrapper>\n            <HelmetTags title=\"Inbox | Anystay\" />\n            {window.innerWidth < 768 && <TopNavHeader listingOwnerData={listingOwnerData} bookingRequest={bookingRequest} />}\n\n            <ChatBoxTopHeader listingOwnerData={listingOwnerData} bookingRequest={bookingRequest} />\n\n            {window.innerWidth < 768 && <TopBookingInfo bookingRequest={bookingRequest} conversation={conversation} listingData={listingData} />}\n\n            <ConversationInbox accessToken={accessToken} />\n\n            <ConversationChatBox accessToken={accessToken} listingOwnerProfilePictureURL={listingOwnerProfilePictureURL} />\n\n            <ConversationBookingDetails\n                loadingPage={loadingPage}\n                bookingRequest={bookingRequest}\n                listingOwnerData={listingOwnerData}\n                listingData={listingData}\n                guestPriceBreakdown={guestPriceBreakdown}\n            />\n        </ConversationWrapper>\n    );\n}\n"],"names":["TopNavHeader","_ref","listingOwnerData","bookingRequest","userModel","setUserModel","useRecoilState","userModelSelector","navigate","useNavigate","_jsxs","ConversationTitleWrapper","children","_jsx","BackBtn","onClick","id","type","_Fragment","ConversationTitle","firstName","ConversationBookingRequestMobileHeaderHostPhoneBtn","href","phone","xmlns","width","height","viewBox","fill","d","completed","ColorTheme","Black","color","Grey1","ChatBoxTopHeader","ConversationBookingRequestDesktopHeaderWrapper","ConversationBookingRequestDesktopHeaderTitle","ConversationBookingRequestDesktopHeaderHostPhoneBtn","undefined","TopBookingInfo","conversation","listingData","getMonth","month","imgKey","useMemo","JSON","parse","listingImages","key","ConversationBookingRequestHeaderWrapper","listingmodelID","ConversationBookingRequestHeaderImage","src","constructOptimisedImageUrl","alt","ConversationBookingRequestHeaderTextWrapper","ConversationBookingRequestHeaderTitle","propertyTitle","substring","split","length","ConversationBookingRequestHeaderSubtitle","confirmed","status","getArrivalDate","arrivalDate","Date","replace","getDate","getDepartureDate","departureDate","ConversationBubble","_conversation$UserHos","_conversation$UserHos2","useParams","profilePhoto","setProfilePhoto","useState","useEffect","_conversation$Booking","_conversation$Booking2","BookingRequestModel","ListingModel","img","getFormatedDate","date","unFormatedDate","getUTCDate","RecentConversationBubble","to","selected","RecentConversationBubblesListingImage","RecentConversationBubbleTextWrapper","style","display","justifyContent","RecentConversationBubblesTitle","UserHostModel","UserModel","RecentConversationBubblesSubtitle","fetchTimeDifference","startDate","updatedAt","timeDiff","getTime","Math","floor","getTheMostRecentConversationMsg","ellipsis","message","MessageModels","items","body","guestNoteBody","getConversationSubtitle","_conversation$Booking8","_conversation$Booking9","subtitle","getBookingRequestState","_conversation$Booking3","_conversation$Booking4","_conversation$Booking5","_conversation$Booking6","_conversation$Booking7","declined","cancelled","expired","slice","ConversationInbox","accessToken","conversationsContainerRef","useRef","conversationsFetching","conversationNextToken","isConversationBottom","setIsConversationBottom","conversations","setConversations","loadingPage","setLoadingPage","sortConversations","sort","a","b","updateGuestConversationsSubscription","useCallback","async","API","graphql","graphqlOperation","customSubscriptions","messageownerID","userModelId","subscribe","next","_ref2","provider","value","prevConversations","updatedConversation","data","onUpdateConversationByMessageOwnerID","conversationsCopy","map","toISOString","error","console","warn","fetchConversations","callApi","headers","Authorization","nextToken","then","res","_res$body","log","success","current","fetchMoreConversations","catch","err","handleConversationScroll","hasConversationOverFlow","_conversationsContain","_conversationsContain2","scrollHeight","clientHeight","_conversationsContain3","_conversationsContain4","_conversationsContain5","ceil","scrollTop","addEventListener","removeEventListener","init","RecentConversationsWrapper","ref","RecentConversationsTitle","RecentConversationBubblesWrapper","FetchMoreConversationLoadingWrapper","ChatMessageLoadingSpinner","ConversationBookingRequestDesktopWrapperLoadingWrapper","styled","div","Grey2","ConversationBookingRequestDesktopWrapperLoading","ConversationBookingDetails","guestPriceBreakdown","copied","setCopied","changesRequested","setChangesRequested","refundRequested","setRefundRequested","bookingDetailRef","time","renderChangeBtn","BookingRequestDetailLinkDisabled","BookingRequestDetailLink","checkChangesRequested","ChangeBookingRequestModel","item","index","checkRefundRequested","RefundRequestModel","_bookingDetailRef$cur","scrollTo","top","ConversationBookingRequestDesktopWrapper","BookingRequestStateWrapper","ConversationBookingRequestDesktopHeaderSubtitle","BookingRequestDetailsWrapperButton","BookingRequestImage","BookingRequestTitle","BookingRequestSubtitle","placeType","getPlaceType","typeOfPlace","suburb","BookingRequestCompleteOrDetailsButtonWrapper","BookingRequestDetailsButton","BookingRequestDetailsButtonComplete","BookingRequestDatesWrapper","gridColumn","gridRow","flexDirection","BookingRequestDatesTitle","BookingRequestDatesSubtitle","getArrivalFullDate","getFullYear","BookingRequestDatesSubtitleTime","checkInTime","BookingRequestDatesDivider","paddingLeft","getDepartureFullDate","checkOutTime","BookingRequestDetailWrapper","guests","border","confirmationCode","BookingRequestDetailButton","navigator","clipboard","writeText","InboxSectionDivider","fontSize","lineHeight","marginTop","marginBottom","priceItems","filter","label","priceItem","PriceDetailsSubtotalPriceWrapper","PriceDetailsSubtotalPrice","amountFormatted","subTotalItems","fontWeight","BookingRequestCommunicationNotice","getCancellationPolicy","flexibleDate","setUTCDate","moderateDate","strictDate","cancellationPolicy","deposit","Number","BookingRequestReportHost","window","Intercom","Message","loading","listingOwnerProfilePictureURL","prevMessage","msgLoading","setMsgLoading","isSameAuthor","author","loadingTimer","setTimeout","clearTimeout","alignItems","gap","ConversationChatBubbleProfilePicture","ReceivedMessageWrapper","marginLeft","visibility","MessageWrapper","MessageInput","conversationmodelID","addMessage","scrollToBottomConversation","setMessage","numberOfMessageSend","setNumberOfMessageSend","createMessage","prevState","trim","tempId","result","characters","i","charAt","random","makeid","createdAt","isNote","hostNoteBody","conversationID","conversationModelId","alert","ConversationMessageInputWrapper","ConversationMessagesInput","placeholder","onChange","e","target","onKeyPress","ConversationMessagesInputSendButton","SendButtonImg","MessageInputComponent","currentDate","ConversationMessageInputContentWrapper","BookingRequestButtonWrapper","ConversationMessagesContainerLoadingWrapper","ConversationMessagesContainerLoading","ConversationChatBox","messages","setMessages","conversationMessageContainerRef","currentScrollPos","messageFetching","isTop","setIsTop","setConversation","setBookingRequest","setListingOwnerData","previousIdRef","_conversationMessageC","_conversationMessageC2","handleMessagesScroll","hasMessagesOverFlow","_conversationMessageC3","_conversationMessageC4","_conversationMessageC7","_conversationMessageC9","_conversationMessageC8","refreshMessages","fetchedMessages","newMessages","newMessagesToAdd","toAdd","j","push","concat","fetchMoreMessages","conversationId","token","prevMsg","keepScrollPositionAfterFetchMore","_conversationMessageC5","_conversationMessageC6","getConversation","_conversationMessageC10","_conversationMessageC11","_conversationMessageC12","_conversationMessageC13","_conversationMessageC14","_conversationMessageC15","pageChange","arguments","conversationMessageScrollWhenReceive","initConversationSubscription","ConversationMessagesContainer","ConversationNoMessagesYetTitle","ConversationNoMessagesYetSubtitle","FetchMoreMessagesLoadingWrapper","ConversationCreatedDate","toLocaleDateString","day","year","toLocaleTimeString","hour","minute","ConversationCreatedBubble","messageDate","previousMessage","Conversations","setAccessToken","accessTokenSelector","setListingData","setListingOwnerProfilePictureURL","setGuestPriceBreakdown","_res$body2","_res$body2$conversati","_res$body3","_res$body3$conversati","_res$body3$conversati2","_res$body4","_res$body4$conversati","_res$body4$conversati2","_res$body5","_res$body5$conversati","_res$body5$conversati2","_res$body6","_res$body6$conversati","_res$body6$conversati2","profilePicture","listingOwnerProfilePic","constructOptimisedProtectedImageUrl","identityID","ConversationWrapper","HelmetTags","title","innerWidth"],"mappings":"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","debug_id":"2787eb79-a448-5021-bfc3-748ef2de1c9a"}