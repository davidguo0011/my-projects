type UserModel 
@model  
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [update, read]},
  {allow: private, provider: iam}
]) 
{
  id: ID! 
  owner: String!
  email: String @index(name: "byEmail", queryField: "userModelByEmail") 
  phone: String! @index(name: "byPhone", queryField: "userModelByPhone") 
  dateOfBirth: String
  firstName: String!
  lastName: String!
  profileDescription: String
  profilePicture: String
  coverPicture: String
  savedListings: [String]
  username: String @index(name: "byUsername", queryField: "userModelByUsername")
  identityID: String
  guestMode: Boolean
  stripeCustomerID: String
  phoneConfirmed: Boolean
  emailConfirmed: Boolean
  userIDConfirmed: Boolean
  privacyPolicyAccepted: Boolean
  identityDocuments: [String]
  facebookURL: String
  instagramURL: String
  twitterURL: String
  tiktokURL: String
  overallAverage: Int
  communicationAverage: Int
  cleanlinessAverage: Int
  referredBy: String
  referralCode: String
  deactivated: Boolean
  suspended: Boolean
  suspendedUntil: AWSDateTime
  suspendedReason: String
  externalSignOn: Boolean
  externalSignOnCompleted: Boolean
  xiaozhuUserId: String @index(name: "byXiaozhuUserId", queryField: "userModelByXiaozhuUserId")
  ConversationModels: [ConversationModel] @hasMany(indexName: "byUserModel", fields: ["id"])
  BookingRequestModels: [BookingRequestModel] @hasMany(indexName: "byUserModel", fields: ["id"])
  OrderModels: [OrderModel] @hasMany(indexName: "byUserModel", fields: ["id"])
  Notifications: [Notification] @hasMany(indexName: "byUserModelID", fields: ["id"])
  ReviewGuestModel: [ReviewGuestModel] @hasMany(indexName: "byUserModelID", fields: ["id"])
  ReviewStayModels: [ReviewStayModel] @hasMany(indexName: "byUserModelID", fields: ["id"])
}

type UserHostModel 
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID! 
  owners: [String!]
  primaryOwner: String! @index(name: "byPrimaryOwner", queryField: "userHostModelByPrimaryOwner")
  readOnlyOwners: [String]
  usermodelID: ID! @index(name: "byUsermodelID", queryField: "userHostModelByUsermodelID") 
  stripeAccountID: String @index(name: "byStripeAccountID", queryField: "userHostModelByStripeAccountID")
  stripeAccountVerified: Boolean
  standardServiceFee: Boolean
  totalListings: Int
  UserModel: UserModel @hasOne(fields: ["usermodelID"])
  ConversationModels: [ConversationModel] @hasMany(indexName: "byUserHostModel", fields: ["id"])
  ListingModels: [ListingModel] @hasMany(indexName: "byUserHostModel", fields: ["id"])
  ProductModels: [ProductModel] @hasMany(indexName: "byUserHostModel", fields: ["id"])
  BookingRequestModels: [BookingRequestModel] @hasMany(indexName: "byUserHostModel", fields: ["id"])
  OrderModels: [OrderModel] @hasMany(indexName: "byUserModel", fields: ["id"])
  ReviewGuestModels: [ReviewGuestModel] @hasMany(indexName: "byUserHostModelID", fields: ["id"])
  piggyUpdatedAt: AWSDateTime
  hostawayKey: String
  hostawaySecret: String
  homeheroAPIKey: String
  guestyKey: String
  guestySecret: String
  hospitableChannelActivated: Boolean
  hospitableRedirectUrl: String
  hospitableRedirectUrlExpiry: AWSDateTime
  hospitableAccessToken: String
  hospitableRefreshToken: String
  invitedUsers: [String]
  readOnlyInvitedUsers: [String]
  lodgifyAPIKey: String
}

type ListingModel 
@searchable
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [update, read]},
  {allow: private, provider: iam}
]) 
{
  id: ID! 
  createdAt: AWSDateTime
  owners: [String!]
  readOnlyOwners: [String]
  placeId: String
  unitNumber: String
  streetNumber: String
  street: String
  suburb: String
  postcode: Int
  state: String
  stateShort: String
  city: String
  country: String
  beds: Int
  bedrooms: Int
  bathrooms: Int
  propertyType: String
  typeOfPlace: String
  propertyDescription: String
  propertyDescriptionEmbedding: [Float]
  propertySoftEmbedding: [Float]
  trainingEvolutions: Int
  translatedPropertyDescription: String
  listingImages: [AWSJSON]
  status: String
  amenities: [String]
  categories: [String]
  tags: [String]
  deposit: Int
  guests: Int
  minimumStay: Int
  minimumPrice: Int
  maximumPrice: Int
  nightlyPrices: [AWSJSON]
  maximumStay: Int
  weeklyMinimumPrice: Int
  weeklyMaximumStay: Int
  location: AWSJSON
  propertyTitle: String
  internalName: String
  translatedPropertyTitle: String
  houseRules: [String]
  draft: Boolean
  verified: Boolean
  verifiedDocuments: [String]
  weeklyDiscount: Float
  monthlyDiscount: Float
  cleaningFee: Float
  cleaningFrequency: String
  availabilityRange: String
  rooms: [AWSJSON]
  RoomModels: [RoomModel] @hasMany(indexName: "byListingModel", fields: ["id"])
  userhostmodelID: ID @index(name: "byUserHostModel", queryField: "listingModelByUserHostModel", sortKeyFields: ["createdAt"])
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
  ProductModels: [ProductModel] @manyToMany(relationName: "ListingProducts")
  BookingRequestModels: [BookingRequestModel] @hasMany(indexName: "byListingModel", fields: ["id"])
  ReviewStayModels: [ReviewStayModel] @hasMany(indexName: "byListingModel", fields: ["id"])
  totalReviews: Int
  qualityScore: Float
  overallAverage: Int
  communicationAverage: Int
  amenitiesAverage: Int
  cleaningAverage: Int
  locationAverage: Int
  serviceAverage: Int
  valueAverage: Int
  cancellationPolicy: String
  onceOffPaymentsOnly: Boolean
  instantBookEnabled: Boolean
  stayType: String
  averageStayLength: [Int]
  checkInTime: Float
  checkOutTime: Float
  checkInInstructions: String
  checkOutInstructions: String
  timeBeforeCheckIn: Int
  timeAfterCheckOut: Int
  extraGuestFee: Float
  extraMaxGuests: Float
  disabledDates: [AWSJSON]
  unavailableDates: [AWSJSON]
  iCalUnavailableDates: [AWSJSON]
  iCalImportLinks: [String]
  straID: String
  advanceNotice: Int
  advanceNoticeTime: Int
  approved: Boolean
  standardServiceFee: Boolean
  fliggyApproved: Boolean
  fliggyHidden: Boolean
  fliggyID: String
  wifiName: String
  wifiPassword: String
  piggyApproved: Boolean
  piggyUpdatedAt: AWSDateTime
  areaValue: Int
  areaUnit: String
  xiaozhuRoomId: String @index(name: "byXiaozhuRoomId", queryField: "listingModelByXiaozhuRoomId")
  xiaozhuReviewApproved: Boolean
  xiaozhuAddressId: String
  xiaozhuRejectReasons: [String]
  customServiceFeePercent: Float
  hostawayListingId: Int
  hostawayLastSyncedAt: AWSDateTime
  hostawayReviewLastSyncedAt: AWSDateTime
  hostawaySyncEnabled: Boolean
  guestyListingId: String
  guestyLastSyncedAt: AWSDateTime
  guestySyncEnabled: Boolean
  homeheroListingId: [AWSJSON]
  homeheroLastSyncedAt: AWSDateTime
  homeheroSyncEnabled: Boolean
  hospitableListingId: String @index(name: "byHospitableListingId", queryField: "listingModelByHospitableListingId")
  hospitableLastSyncedAt: AWSDateTime
  hospitableSyncEnabled: Boolean
  hospitableSyncCompleted: Boolean
  invitedUsers: [String]
  readOnlyInvitedUsers: [String]
  seoUpdatedAt: AWSDateTime
  lodgifyPropertyId: String @index(name: "byLodgifyPropertyId", queryField: "listingModelByLodgifyPropertyId")
  lodgifyRoomId: String
  lodgifyLastSyncedAt: AWSDateTime
  lodgifySyncEnabled: Boolean
  isHotel: Boolean
}

type RoomModel
@model
@auth(
  rules: [
    {allow: owner, operations: [read]},
    {allow: private, provider: iam}
  ]
)
{
  id: ID!
  owner: String!
  listingmodelID: ID! @index(name: "byListingModel", queryField: "roomModelByListingModel")
  userhostmodelID: ID 
  ListingModel: ListingModel @belongsTo(fields: ["listingmodelID"])
  images: [String]
  roomTitle: String
  roomDescription: String
  roomType: String
  roomAmenities: [String]
  roomBeds: [String]
  isHotelRoom: Boolean
  disabledDates: [AWSJSON]
  unavailableDates: [AWSJSON]
  nightlyPrices: [AWSJSON]
}

type ConversationModel 
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  updatedAt: AWSDateTime
  owners: [String!]
  messageownerID: ID @index(name: "byUserModel", sortKeyFields: ["updatedAt"])
  listingmodelID: ID 
  userhostmodelID: ID @index(name: "byUserHostModel", sortKeyFields: ["updatedAt"])
  bookingrequestID: ID @index(name: "byBookingRequestModel")
  externalConversationId: String
  externalSyncEnabled: Boolean
  externalLastSyncedAt: AWSDateTime
  guestSeen: Boolean
  hostSeen: Boolean
  status: String
  UserModel: UserModel @belongsTo(fields: ["messageownerID"])
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
  BookingRequestModel: BookingRequestModel @belongsTo(fields: ["bookingrequestID"])
  MessageModels: [MessageModel] @hasMany(indexName: "byConversationModel", fields: ["id"])
}

type MessageModel 
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  createdAt: AWSDateTime
  tempId: String
  owners: [String]
  body: String
  author: String
  conversationmodelID: ID @index(name: "byConversationModel", queryField: "messageModelByConversationModel", sortKeyFields: ["createdAt"])
  isNote: Boolean
  isTimestamp: Boolean
  hostawayMessageId: String
  guestNoteBody: String
  hostNoteBody: String
}

type BookingRequestModel 
@searchable
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  hostawayReservationId: String @index(name: "byHostawayReservationId", queryField: "bookingRequestModelByHostawayReservationId")
  hostawayConversationId: String
  owners: [String!]
  arrivalDate: AWSDateTime
  departureDate: AWSDateTime
  nights: Int
  guests: Int
  adults: Int
  children: Int
  infants: Int
  pets: Int
  maxGuests: Int
  expired: Boolean
  usermodelID: ID @index(name: "byUserModel", queryField: "bookingRequestModelByUserModel", sortKeyFields: ["arrivalDate"])
  userhostmodelID: ID @index(name: "byUserHostModel", queryField: "bookingRequestModelByUserHostModel", sortKeyFields: ["arrivalDate"])
  listingmodelID: ID @index(name: "byListingModel", queryField: "bookingRequestModelByListingModel", sortKeyFields: ["arrivalDate"])
  paymentmodelID: ID
  stripeAccountID: String
  confirmationCode: String
  conversationmodelID: ID
  ordermodelID: ID @index(name: "byOrderModel", queryField: "bookingRequestModelByOrderModel", sortKeyFields: ["arrivalDate"])
  confirmed: Boolean
  confirmedAt: AWSDateTime
  couponCode: String
  couponDiscountAmount: Int
  declined: Boolean
  reasonDeclined: String
  cancelled: Boolean
  cancelledAt: AWSDateTime
  cancelledBy: String
  reasonCancelled: String
  completed: Boolean
  stayReviewed: Boolean
  guestReviewed: Boolean
  checkInTime: Int
  checkOutTime: Int
  cancellationPolicy: String
  timeBeforeCheckIn: Int
  timeAfterCheckOut: Int
  bookingAmount: Int
  bookingAmountIncludingServiceFee: Int
  paymentAmount: Int
  pricePerNight: Int
  guestPriceBreakdown: AWSJSON
  hostPriceBreakdown: AWSJSON
  nightlyPrices: [AWSJSON]
  minimumPrice: Int
  serviceFee: Int
  cleaningFee: Int
  extraGuestFee: Int
  extraMaxGuests: Int
  weeklyDiscount: Int
  monthlyDiscount: Int
  paymentModels: [String]
  transferModels: [String]
  refundModels: [String]
  transferReversalModels: [String]
  UserModel: UserModel @belongsTo(fields: ["usermodelID"])
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
  ListingModel: ListingModel @belongsTo(fields: ["listingmodelID"])
  ConversationModel: ConversationModel @hasOne(fields: ["id"])
  OrderModels: OrderModel @belongsTo(fields: ["ordermodelID"])
  ChangeBookingRequestModel: [ChangeBookingRequestModel] @hasMany(indexName: "byBookingRequestID", fields: ["id"])
  RefundRequestModel: [RefundRequestModel] @hasMany(indexName: "byBookingRequestID", fields: ["id"])
  ReviewStayModel: [ReviewStayModel] @hasMany(indexName: "byBookingRequestID", fields: ["id"])
  deposit: Int
  refundedAmount: Int
  standardServiceFee: Boolean
  hostPaid: Boolean
  responseNeeded: Boolean
  responseBefore: AWSDateTime
  changeRequested: Boolean
  refundRequested: Boolean
  state: String
  overallReviewScore: Int
  xiaozhuOrderId: String @index(name: "byXiaozhuOrderId", queryField: "bookingRequestModelByXiaozhuOrderId", sortKeyFields: ["arrivalDate"])
  xiaozhuParentOrderId: String 
  xiaozhuOrderStatus: String
  xiaozhuRoomId: String
  xiaozhuRoomFee: Int
  xiaozhuPenaltyFee: Int
  xiaozhuOrderAmount: Int
  xiaozhuPromotionFee: Int
  xiaozhuPaidFee: Int
  xiaozhuBookTime: AWSDateTime
  xiaozhuCancelRule: [AWSJSON]
  xiaozhuBookFromEnv: String
  customServiceFeePercent: Float
  referredBy: String @index(name: "byReferredBy", queryField: "bookingRequestModelByReferredBy")
  referralPaid: Boolean
  invitedUsers: [String]
}

type ChangeBookingRequestModel 
@model 
@auth(rules: [
  {allow: owner, ownerField: "owners", operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID! 
  createdAt: AWSDateTime
  owners: [String!]
  bookingRequestID: ID! @index(name: "byBookingRequestID", queryField: "changeBookingRequestModelByBookingRequestID", sortKeyFields: ["createdAt"])
  newArrivalDate: AWSDateTime
  newDepartureDate: AWSDateTime
  newGuests: Int
  newAdults: Int
  newChildren: Int
  newInfants: Int
  newPets: Int
  paymentIntentID: String
  bookingAmount: Float
  bookingAmountIncludingServiceFee: Float
  serviceFee: Float
  newBookingAmount: Float
  newServiceFee: Float
  newBookingAmountIncludingServiceFee: Float
  priceDifference: Float
  newPaymentAmount: Float
  serviceFeePriceDifference: Float
  confirmed: Boolean
  declined: Boolean
  expired: Boolean
  completed: Boolean 
  pricePerNight: Int
  newCouponCode: String
  newCouponDiscountAmount: Int
}

type ProductModel
@searchable
@model
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
])
{
  id: ID!
  owner: String!
  productTitle: String!
  productDescription: String
  productType: String
  productFulfillmentType: String
  productImages: [AWSJSON]
  netPrice: Int
  pricingType: String
  inventory: Int
  location: AWSJSON
  fulfillmentRadius: Int
  guestOnlyPurchase: Boolean
  minOrderQuantity: Int
  maxOrderQuantity: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  maxGuests: Int
  duration: Int
  minimumNotice: Int
  unavailableDates: [AWSJSON]
  internalCode: String
  unlimitedInventory: Boolean
  status: String
  approved: Boolean
  draft: Boolean
  instantBookEnabled: Boolean
  userhostmodelID: ID @index(name: "byUserHostModel", queryField: "productModelByUserHostModel")
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
  OrderModels: [OrderModel] @hasMany(fields: ["id"])
  ListingModels: [ListingModel] @manyToMany(relationName: "ListingProducts")
  categories: [String]
  tags: [String]
}

type OrderModel
@searchable
@model
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
])
{
  id: ID!
  owner: String!
  usermodelID: ID @index(name: "byUserModel", queryField: "orderModelByUserModel")
  userhostmodelID: ID @index(name: "byUserHostModel", queryField: "orderModelByUserHostModel")
  status: String
  confirmed: Boolean
  declined: Boolean
  expired: Boolean
  completed: Boolean
  cancelled: Boolean
  fulfilled: Boolean
  bookingAmount: Int
  bookingAmountIncludingServiceFee: Int
  serviceFee: Int
  couponCode: String
  couponDiscountAmount: Int
  refunded: Int
  payments: [String]
  transfers: [String]
  refunds: [String]
  transferReversals: [String]
  UserModel: UserModel @belongsTo(fields: ["usermodelID"])
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
  BookingRequestModels: [BookingRequestModel] @hasMany(fields: ["id"])
  OrderItemModels: [OrderItemModel] @hasMany(fields: ["id"])
}

type OrderItemModel
@model
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
])
{
  id: ID!
  owner: String!
  productmodelID: ID @index(name: "byProductModel", queryField: "orderItemModelByProductModel")
  quantity: Int
  status: String
  fulfilled: Boolean
  subTotal: Int
  itemPrice: Int
  guests: Int
  adults: Int
  children: Int
  infants: Int
  pets: Int
  startDate: AWSDateTime
  endDate: AWSDateTime
  ordermodelID: ID @index(name: "byOrderModel", queryField: "orderItemModelByOrderModel")
  OrderModel: OrderModel @belongsTo(fields: ["id"])
  ProductModel: ProductModel @hasOne(fields: ["productmodelID"])
}

type ReviewStayModel 
@model  
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  bookingRequestID: ID @index(name: "byBookingRequestID", queryField: "reviewStayModelByBookingRequestID")
  listingmodelID: ID @index(name: "byListingModel", queryField: "reviewStayModelByListingModel")
  usermodelID: ID @index(name: "byUserModelID", queryField: "reviewStayModelByUserModelID")
  hostawayReview: Boolean
  hostawayReviewId: String
  externalUserFirstName: String
  externalUserLastName: String
  overall: Int
  communication: Int
  amenities: Int
  cleaning: Int
  location: Int
  service: Int
  value: Int
  body: String
  completed: Boolean
  hidden: Boolean
  UserModel: UserModel @belongsTo(fields: ["usermodelID"])
  BookingRequestModel: BookingRequestModel @belongsTo(fields: ["bookingRequestID"])
  ListingModel: ListingModel @belongsTo(fields: ["listingmodelID"])
}

type ReviewGuestModel 
@model 
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  bookingRequestID: String! @index(name: "byBookingRequestID", queryField: "reviewGuestModelByBookingRequestID")
  usermodelID: ID @index(name: "byUserModelID", queryField: "reviewGuestModelByUserModelID")
  userhostmodelID: ID @index(name: "byUserHostModelID", queryField: "reviewGuestModelByUserHostModelID")
  overall: Int
  communication: Int
  cleanliness: Int
  body: String
  completed: Boolean
  hidden: Boolean
  UserHostModel: UserHostModel @belongsTo(fields: ["userhostmodelID"])
}

type RefundRequestModel 
@model
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  bookingRequestID: ID @index(name: "byBookingRequestID", queryField: "refundRequestModelByBookingRequestID")
  confirmed: Boolean
  declined: Boolean
  expired: Boolean
  completed: Boolean 
  refundAmount: Int
  refundReason: String
  refundMessage: String
  status: String
}

type Notification 
@model 
@auth(rules: [
  {allow: owner, operations: [read]},
  {allow: private, provider: iam}
]) 
{
  id: ID!
  owner: String! @index(name: "byOwner", queryField: "notificationByOwner")
  title: String
  message: String
  usermodelID: ID @index(name: "byUserModelID", queryField: "notificationByUserModelID")
  userhostmodelID: ID @index(name: "byUserHostModelID", queryField: "notificationByUserHostModelID")
  sentTo: String
  read: Boolean
  eventType: String
  event: String
}

type Coupon @model 
@auth(rules: [
  {allow: private, provider: iam}
]) 
{
  id: ID!
  expireDate: AWSDateTime
  beginDate: AWSDateTime
  discountAmount: Int
  discountPercent: Int
  maxDiscountAmount: Int
  minAmount: Int
  couponCode: String! @index(name: "byCouponCode", queryField: "couponByCouponCode")
  timesRedeemed: Int
  valid: Boolean
  exclusive: Boolean
  validUsers: [String]
  invalidUsers: [String]
  oneTimeUse: Boolean
}

type Subscription {
  onMessageByConversationModelID(conversationmodelID: ID!): MessageModel @aws_subscribe(mutations: ["createMessageModel"])
  onUpdateUserByIDTrigger(id: ID!): UserModel @aws_subscribe(mutations: ["updateUserModel"])
  onBookingByUserModelID(usermodelID: ID!): BookingRequestModel @aws_subscribe(mutations: ["createBookingRequestModel"])
  onUpdateBookingByID(id: ID!): BookingRequestModel @aws_subscribe(mutations: ["updateBookingRequestModel"])
  onConversationByMessageOwnerID(messageownerID: ID!): ConversationModel @aws_subscribe(mutations: ["createConversationModel"])
  onUpdateConversationByMessageOwnerID(messageownerID: ID!): ConversationModel @aws_subscribe(mutations: ["updateConversationModel"])
  onConversationByUserHostModelID(userhostmodelID: ID!): ConversationModel @aws_subscribe(mutations: ["createConversationModel"])
  onUpdateConversationByUserHostModelID(userhostmodelID: ID!): ConversationModel @aws_subscribe(mutations: ["updateConversationModel"])
  onCreateGuestNotificationByID(usermodelID: ID!): Notification @aws_subscribe(mutations: ["createNotification"])
}