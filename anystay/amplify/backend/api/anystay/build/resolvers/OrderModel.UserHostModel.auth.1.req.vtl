## [Start] Authorization Steps. **
$util.qr($ctx.stash.put("hasAuth", true))
#set( $isAuthorized = false )
#if( $util.authType() == "IAM Authorization" )
  #set( $adminRoles = ["ap-southeast-2_laYMp7oIZ_Full-access/CognitoIdentityCredentials","ap-southeast-2_laYMp7oIZ_Manage-only/CognitoIdentityCredentials","anystay-backend-dev-ap-southeast-2-lambdaRole","anystay-user-dev-ap-southeast-2-lambdaRole","anystay-booking-dev-ap-southeast-2-lambdaRole","anystay-listing-dev-ap-southeast-2-lambdaRole","anystay-product-dev-ap-southeast-2-lambdaRole","anystay-auth-dev-ap-southeast-2-lambdaRole","anystay-admin-dev-ap-southeast-2-lambdaRole","anystay-authorizers-dev-ap-southeast-2-lambdaRole","arn:aws:iam::751336295962:user/Ferdy","arn:aws:iam::751336295962:user/Hao","arn:aws:iam::751336295962:user/Ferdy-CLI-Test","arn:aws:iam::751336295962:user/Richard","arn:aws:iam::751336295962:user/Lewis-dev","arn:aws:iam::751336295962:user/rey-dev"] )
  #foreach( $adminRole in $adminRoles )
    #if( $ctx.identity.userArn.contains($adminRole) && $ctx.identity.userArn != $ctx.stash.authRole && $ctx.identity.userArn != $ctx.stash.unauthRole )
      #return($util.toJson({}))
    #end
  #end
  #if( !$isAuthorized )
    #if( ($ctx.identity.userArn == $ctx.stash.authRole) || ($ctx.identity.cognitoIdentityPoolId == "ap-southeast-2:b71f4e0a-c244-4468-b65b-c1facac1d44c" && $ctx.identity.cognitoIdentityAuthType == "authenticated") )
      #set( $isAuthorized = true )
    #end
  #end
#end
#if( $util.authType() == "User Pool Authorization" )
  #if( !$isAuthorized )
    #set( $authFilter = [] )
    #set( $ownerClaim0 = $util.defaultIfNull($ctx.identity.claims.get("sub"), null) )
    #set( $currentClaim1 = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), null)) )
    #if( !$util.isNull($ownerClaim0) && !$util.isNull($currentClaim1) )
      #set( $ownerClaim0 = "$ownerClaim0::$currentClaim1" )
      #if( !$util.isNull($ownerClaim0) )
        $util.qr($authFilter.add({"owner": { "eq": $ownerClaim0 }}))
      #end
    #end
    #set( $role0_0 = $util.defaultIfNull($ctx.identity.claims.get("sub"), null) )
    #if( !$util.isNull($role0_0) )
      $util.qr($authFilter.add({"owner": { "eq": $role0_0 }}))
    #end
    #set( $role0_1 = $util.defaultIfNull($ctx.identity.claims.get("username"), $util.defaultIfNull($ctx.identity.claims.get("cognito:username"), null)) )
    #if( !$util.isNull($role0_1) )
      $util.qr($authFilter.add({"owner": { "eq": $role0_1 }}))
    #end
    #if( !$authFilter.isEmpty() )
      $util.qr($ctx.stash.put("authFilter", { "or": $authFilter }))
    #end
  #end
#end
#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )
$util.unauthorized()
#end
$util.toJson({"version":"2018-05-29","payload":{}})
## [End] Authorization Steps. **