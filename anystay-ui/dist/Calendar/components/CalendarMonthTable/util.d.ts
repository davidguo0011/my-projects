import { CalendarMonthBlockRowCell, CalendarMonthFillRowCell, CalendarMonthOccupiedRowCell, CalendarMonthTableCell, CalendarMonthTableOccupiedCell, CalendarMonthTableProp, CalendarMonthTableSelection } from "./interface";
import { CalendarBlockRowProp, CalendarFillRowProp, CalendarMonthDate, CalendarMonthlySelectProp, CalendarOccupiedRowProp, CalendarRowProp } from "../../interface";
import { Dayjs } from 'dayjs';
import { Dispatch, SetStateAction } from 'react';
import { OnScrollParams } from 'react-virtualized';
export declare function generateVirtualCell(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number, rowId: string, value: string): void;
export declare function generateRealCell(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number, rowId: string, value: string, dMonth: Dayjs, day: number, fillRowCells: CalendarMonthFillRowCell[], blockRowCells: CalendarMonthBlockRowCell[], occupiedRowCells: CalendarMonthOccupiedRowCell[]): void;
export declare function generateDatesFromStartAndEnd(startDate: string, endDate: string): string[];
export declare function generateFillTableCells(fillRows: CalendarFillRowProp[]): CalendarMonthFillRowCell[];
export declare function generateBlockTableCells(blockRows: CalendarBlockRowProp[]): CalendarMonthBlockRowCell[];
export declare function getFillRowCell(fillRowCells: CalendarMonthFillRowCell[], rowId: string, date: string): CalendarMonthFillRowCell;
export declare function getBlockRowCell(blockRowCells: CalendarMonthBlockRowCell[], rowId: string, date: string): CalendarMonthBlockRowCell;
export declare function generateOccupiedTableCells(occupiedRows: CalendarOccupiedRowProp[]): CalendarMonthOccupiedRowCell[];
export declare function getOccupiedRowCell(occupiedRowCells: CalendarMonthOccupiedRowCell[], rowId: string, date: string): CalendarMonthOccupiedRowCell;
export declare function generateTableCells(monthDate: CalendarMonthDate, rows: CalendarRowProp[], fillRows: CalendarFillRowProp[], blockRows: CalendarBlockRowProp[], occupiedRows: CalendarOccupiedRowProp[]): CalendarMonthTableCell[];
export declare function getTableCell(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): CalendarMonthTableCell;
export declare function getColumnBackgroundSelectedStyle(rowIndex: number, columnIndex: number, selection: CalendarMonthTableSelection): string;
export declare function getCurrentColumnBorderSelectedStyle(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): "" | "calendar-month-table-row-column-current-selected-border-container";
export declare function getColumnDisabledStyle(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): string;
export declare function getColumBlockStyle(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): string;
export declare function getColumnVirtualStyle(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): string;
export declare function getTableCellVirtualCondition(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): boolean;
export declare function getSelectedTableStartEndCell(tableCells: CalendarMonthTableCell[], rowStartIndex: number, rowEndIndex: number, columnStartIndex: number, columnEndIndex: number): CalendarMonthTableCell[];
export declare function getTableColumnCellsByStartAndEnd(tableCells: CalendarMonthTableCell[], columnStartIndex: number, columnEndIndex: number, rowStartIndex: number, rowEndIndex: number): CalendarMonthTableCell[];
export declare function getTableColumnCells(tableCells: CalendarMonthTableCell[], rowStartIndex: number, rowEndIndex: number, columnStartIndex: number, columnEndIndex: number, rowIndex: number): CalendarMonthTableCell[];
export declare function onScrollDate(params: OnScrollParams, rowHeight: number, tableCells: CalendarMonthTableCell[], props: CalendarMonthTableProp): void;
export declare function showReturnToToday(cellHeight: number, customScrollTop: number, todayScrollTop: number, setShowReturnToday: Dispatch<SetStateAction<boolean>>): void;
export declare function onMouseDown(rowIndex: number, columnIndex: number, selectionVisible: boolean, setSelectionVisible: Dispatch<SetStateAction<boolean>>, setSelection: Dispatch<SetStateAction<CalendarMonthTableSelection>>, tableCells: CalendarMonthTableCell[], firstSelection: React.MutableRefObject<CalendarMonthTableSelection>): void;
export declare function clearSelection(setSelectionVisible: Dispatch<SetStateAction<boolean>>): void;
export declare function onMouseOver(rowIndex: number, columnIndex: number, selectionVisible: boolean, selection: CalendarMonthTableSelection, setSelection: Dispatch<SetStateAction<CalendarMonthTableSelection>>, tableCells: CalendarMonthTableCell[], firstSelection: React.MutableRefObject<CalendarMonthTableSelection>): void;
export declare function onMouseUp(selection: CalendarMonthTableSelection, tableCells: CalendarMonthTableCell[], onSelect?: (prop: CalendarMonthlySelectProp) => void): void;
export declare function onSectionRenderJumpToToday(init: React.MutableRefObject<boolean>, todayScrollTop: React.MutableRefObject<number>, monthDate: CalendarMonthDate, setCustomScrollTop: Dispatch<SetStateAction<number>>, width: number): void;
export declare function getTableCellStartOccupiedCondition(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number): boolean;
export declare function getTableCellOccupied(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number, columnWidth: number): CalendarMonthTableOccupiedCell;
export declare function getOccupiedBorderStyling(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number, columnWidth: number): {
    borderBottomRightRadius: string;
    borderTopRightRadius: string;
    borderBottomLeftRadius?: undefined;
    borderTopLeftRadius?: undefined;
} | {
    borderBottomLeftRadius: string;
    borderTopLeftRadius: string;
    borderBottomRightRadius?: undefined;
    borderTopRightRadius?: undefined;
} | {
    borderBottomRightRadius: string;
    borderTopRightRadius: string;
    borderBottomLeftRadius: string;
    borderTopLeftRadius: string;
} | undefined;
export declare function onOccupiedClick(tableCells: CalendarMonthTableCell[], rowIndex: number, columnIndex: number, props: CalendarMonthTableProp): void;
